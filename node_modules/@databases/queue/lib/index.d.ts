export default class Queue<T> {
    private _head;
    private _tail;
    /**
     * Push an item onto the end of the queue
     */
    push(value: T): void;
    /**
     * Take an item off the start of the queue
     */
    shift(): T | undefined;
    /**
     * Look at an item off the start of the queue without removing it
     */
    peek(): T | undefined;
    /**
     * Get the total number of items in the queue
     */
    getLength(): number;
    /**
     * Remove (and return) all items from the queue
     */
    clear(): T[];
}
export declare class AsyncQueue<T> {
    private readonly _items;
    private readonly _waiting;
    /**
     * Push an item onto the end of the queue
     */
    push(value: T): void;
    /**
     * Get the next item from the start queue, waiting until one
     * is added if the queue is currently empty
     */
    shift(): Promise<T>;
    /**
     * Get the number of items currently in the queue
     *
     * N.B. this can be negative if `.shift()` has been called more times than `.push()`
     */
    getLength(): number;
}
