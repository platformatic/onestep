"use strict"; // auto generated by test suite of pg-schema-introspect

Object.defineProperty(exports, "__esModule", {
  value: true
});
var PgDataTypeID;

(function (PgDataTypeID) {
  // === Array ===

  /**
   * Array<abstime>
   */
  PgDataTypeID[PgDataTypeID["_abstime"] = 1023] = "_abstime";
  /**
   * Array<aclitem>
   */

  PgDataTypeID[PgDataTypeID["_aclitem"] = 1034] = "_aclitem";
  /**
   * Array<bit>
   */

  PgDataTypeID[PgDataTypeID["_bit"] = 1561] = "_bit";
  /**
   * Array<bool>
   */

  PgDataTypeID[PgDataTypeID["_bool"] = 1000] = "_bool";
  /**
   * Array<box>
   */

  PgDataTypeID[PgDataTypeID["_box"] = 1020] = "_box";
  /**
   * Array<bpchar>
   */

  PgDataTypeID[PgDataTypeID["_bpchar"] = 1014] = "_bpchar";
  /**
   * Array<bytea>
   */

  PgDataTypeID[PgDataTypeID["_bytea"] = 1001] = "_bytea";
  /**
   * Array<char>
   */

  PgDataTypeID[PgDataTypeID["_char"] = 1002] = "_char";
  /**
   * Array<cid>
   */

  PgDataTypeID[PgDataTypeID["_cid"] = 1012] = "_cid";
  /**
   * Array<cidr>
   */

  PgDataTypeID[PgDataTypeID["_cidr"] = 651] = "_cidr";
  /**
   * Array<circle>
   */

  PgDataTypeID[PgDataTypeID["_circle"] = 719] = "_circle";
  /**
   * Array<cstring>
   */

  PgDataTypeID[PgDataTypeID["_cstring"] = 1263] = "_cstring";
  /**
   * Array<date>
   */

  PgDataTypeID[PgDataTypeID["_date"] = 1182] = "_date";
  /**
   * Array<daterange>
   */

  PgDataTypeID[PgDataTypeID["_daterange"] = 3913] = "_daterange";
  /**
   * Array<float4>
   */

  PgDataTypeID[PgDataTypeID["_float4"] = 1021] = "_float4";
  /**
   * Array<float8>
   */

  PgDataTypeID[PgDataTypeID["_float8"] = 1022] = "_float8";
  /**
   * Array<gtsvector>
   */

  PgDataTypeID[PgDataTypeID["_gtsvector"] = 3644] = "_gtsvector";
  /**
   * Array<inet>
   */

  PgDataTypeID[PgDataTypeID["_inet"] = 1041] = "_inet";
  /**
   * Array<int2>
   */

  PgDataTypeID[PgDataTypeID["_int2"] = 1005] = "_int2";
  /**
   * Array<int2vector>
   */

  PgDataTypeID[PgDataTypeID["_int2vector"] = 1006] = "_int2vector";
  /**
   * Array<int4>
   */

  PgDataTypeID[PgDataTypeID["_int4"] = 1007] = "_int4";
  /**
   * Array<int4range>
   */

  PgDataTypeID[PgDataTypeID["_int4range"] = 3905] = "_int4range";
  /**
   * Array<int8>
   */

  PgDataTypeID[PgDataTypeID["_int8"] = 1016] = "_int8";
  /**
   * Array<int8range>
   */

  PgDataTypeID[PgDataTypeID["_int8range"] = 3927] = "_int8range";
  /**
   * Array<interval>
   */

  PgDataTypeID[PgDataTypeID["_interval"] = 1187] = "_interval";
  /**
   * Array<json>
   */

  PgDataTypeID[PgDataTypeID["_json"] = 199] = "_json";
  /**
   * Array<jsonb>
   */

  PgDataTypeID[PgDataTypeID["_jsonb"] = 3807] = "_jsonb";
  /**
   * Array<jsonpath>
   */

  PgDataTypeID[PgDataTypeID["_jsonpath"] = 4073] = "_jsonpath";
  /**
   * Array<line>
   */

  PgDataTypeID[PgDataTypeID["_line"] = 629] = "_line";
  /**
   * Array<lseg>
   */

  PgDataTypeID[PgDataTypeID["_lseg"] = 1018] = "_lseg";
  /**
   * Array<macaddr>
   */

  PgDataTypeID[PgDataTypeID["_macaddr"] = 1040] = "_macaddr";
  /**
   * Array<macaddr8>
   */

  PgDataTypeID[PgDataTypeID["_macaddr8"] = 775] = "_macaddr8";
  /**
   * Array<money>
   */

  PgDataTypeID[PgDataTypeID["_money"] = 791] = "_money";
  /**
   * Array<name>
   */

  PgDataTypeID[PgDataTypeID["_name"] = 1003] = "_name";
  /**
   * Array<numeric>
   */

  PgDataTypeID[PgDataTypeID["_numeric"] = 1231] = "_numeric";
  /**
   * Array<numrange>
   */

  PgDataTypeID[PgDataTypeID["_numrange"] = 3907] = "_numrange";
  /**
   * Array<oid>
   */

  PgDataTypeID[PgDataTypeID["_oid"] = 1028] = "_oid";
  /**
   * Array<oidvector>
   */

  PgDataTypeID[PgDataTypeID["_oidvector"] = 1013] = "_oidvector";
  /**
   * Array<path>
   */

  PgDataTypeID[PgDataTypeID["_path"] = 1019] = "_path";
  /**
   * Array<pg_lsn>
   */

  PgDataTypeID[PgDataTypeID["_pg_lsn"] = 3221] = "_pg_lsn";
  /**
   * Array<pg_snapshot>
   */

  PgDataTypeID[PgDataTypeID["_pg_snapshot"] = 5039] = "_pg_snapshot";
  /**
   * Array<point>
   */

  PgDataTypeID[PgDataTypeID["_point"] = 1017] = "_point";
  /**
   * Array<polygon>
   */

  PgDataTypeID[PgDataTypeID["_polygon"] = 1027] = "_polygon";
  /**
   * Array<refcursor>
   */

  PgDataTypeID[PgDataTypeID["_refcursor"] = 2201] = "_refcursor";
  /**
   * Array<regclass>
   */

  PgDataTypeID[PgDataTypeID["_regclass"] = 2210] = "_regclass";
  /**
   * Array<regcollation>
   */

  PgDataTypeID[PgDataTypeID["_regcollation"] = 4192] = "_regcollation";
  /**
   * Array<regconfig>
   */

  PgDataTypeID[PgDataTypeID["_regconfig"] = 3735] = "_regconfig";
  /**
   * Array<regdictionary>
   */

  PgDataTypeID[PgDataTypeID["_regdictionary"] = 3770] = "_regdictionary";
  /**
   * Array<regnamespace>
   */

  PgDataTypeID[PgDataTypeID["_regnamespace"] = 4090] = "_regnamespace";
  /**
   * Array<regoper>
   */

  PgDataTypeID[PgDataTypeID["_regoper"] = 2208] = "_regoper";
  /**
   * Array<regoperator>
   */

  PgDataTypeID[PgDataTypeID["_regoperator"] = 2209] = "_regoperator";
  /**
   * Array<regproc>
   */

  PgDataTypeID[PgDataTypeID["_regproc"] = 1008] = "_regproc";
  /**
   * Array<regprocedure>
   */

  PgDataTypeID[PgDataTypeID["_regprocedure"] = 2207] = "_regprocedure";
  /**
   * Array<regrole>
   */

  PgDataTypeID[PgDataTypeID["_regrole"] = 4097] = "_regrole";
  /**
   * Array<regtype>
   */

  PgDataTypeID[PgDataTypeID["_regtype"] = 2211] = "_regtype";
  /**
   * Array<reltime>
   */

  PgDataTypeID[PgDataTypeID["_reltime"] = 1024] = "_reltime";
  /**
   * Array<text>
   */

  PgDataTypeID[PgDataTypeID["_text"] = 1009] = "_text";
  /**
   * Array<tid>
   */

  PgDataTypeID[PgDataTypeID["_tid"] = 1010] = "_tid";
  /**
   * Array<time>
   */

  PgDataTypeID[PgDataTypeID["_time"] = 1183] = "_time";
  /**
   * Array<timestamp>
   */

  PgDataTypeID[PgDataTypeID["_timestamp"] = 1115] = "_timestamp";
  /**
   * Array<timestamptz>
   */

  PgDataTypeID[PgDataTypeID["_timestamptz"] = 1185] = "_timestamptz";
  /**
   * Array<timetz>
   */

  PgDataTypeID[PgDataTypeID["_timetz"] = 1270] = "_timetz";
  /**
   * Array<tinterval>
   */

  PgDataTypeID[PgDataTypeID["_tinterval"] = 1025] = "_tinterval";
  /**
   * Array<tsquery>
   */

  PgDataTypeID[PgDataTypeID["_tsquery"] = 3645] = "_tsquery";
  /**
   * Array<tsrange>
   */

  PgDataTypeID[PgDataTypeID["_tsrange"] = 3909] = "_tsrange";
  /**
   * Array<tstzrange>
   */

  PgDataTypeID[PgDataTypeID["_tstzrange"] = 3911] = "_tstzrange";
  /**
   * Array<tsvector>
   */

  PgDataTypeID[PgDataTypeID["_tsvector"] = 3643] = "_tsvector";
  /**
   * Array<txid_snapshot>
   */

  PgDataTypeID[PgDataTypeID["_txid_snapshot"] = 2949] = "_txid_snapshot";
  /**
   * Array<uuid>
   */

  PgDataTypeID[PgDataTypeID["_uuid"] = 2951] = "_uuid";
  /**
   * Array<varbit>
   */

  PgDataTypeID[PgDataTypeID["_varbit"] = 1563] = "_varbit";
  /**
   * Array<varchar>
   */

  PgDataTypeID[PgDataTypeID["_varchar"] = 1015] = "_varchar";
  /**
   * Array<xid>
   */

  PgDataTypeID[PgDataTypeID["_xid"] = 1011] = "_xid";
  /**
   * Array<xid8>
   */

  PgDataTypeID[PgDataTypeID["_xid8"] = 271] = "_xid8";
  /**
   * Array<xml>
   */

  PgDataTypeID[PgDataTypeID["_xml"] = 143] = "_xml";
  /**
   * array of int2, used in system tables
   *
   * Array<int2>
   */

  PgDataTypeID[PgDataTypeID["int2vector"] = 22] = "int2vector";
  /**
   * array of oids, used in system tables
   *
   * Array<oid>
   */

  PgDataTypeID[PgDataTypeID["oidvector"] = 30] = "oidvector"; // === PseudoTypes ===

  PgDataTypeID[PgDataTypeID["_record"] = 2287] = "_record";
  /**
   * pseudo-type representing any type
   */

  PgDataTypeID[PgDataTypeID["any"] = 2276] = "any";
  /**
   * pseudo-type representing a polymorphic array type
   */

  PgDataTypeID[PgDataTypeID["anyarray"] = 2277] = "anyarray";
  /**
   * pseudo-type representing a polymorphic common type
   */

  PgDataTypeID[PgDataTypeID["anycompatible"] = 5077] = "anycompatible";
  /**
   * pseudo-type representing an array of polymorphic common type elements
   */

  PgDataTypeID[PgDataTypeID["anycompatiblearray"] = 5078] = "anycompatiblearray";
  /**
   * pseudo-type representing a polymorphic common type that is not an array
   */

  PgDataTypeID[PgDataTypeID["anycompatiblenonarray"] = 5079] = "anycompatiblenonarray";
  /**
   * pseudo-type representing a range over a polymorphic common type
   */

  PgDataTypeID[PgDataTypeID["anycompatiblerange"] = 5080] = "anycompatiblerange";
  /**
   * pseudo-type representing a polymorphic base type
   */

  PgDataTypeID[PgDataTypeID["anyelement"] = 2283] = "anyelement";
  /**
   * pseudo-type representing a polymorphic base type that is an enum
   */

  PgDataTypeID[PgDataTypeID["anyenum"] = 3500] = "anyenum";
  /**
   * pseudo-type representing a polymorphic base type that is not an array
   */

  PgDataTypeID[PgDataTypeID["anynonarray"] = 2776] = "anynonarray";
  /**
   * pseudo-type representing a range over a polymorphic base type
   */

  PgDataTypeID[PgDataTypeID["anyrange"] = 3831] = "anyrange";
  /**
   * C-style string
   */

  PgDataTypeID[PgDataTypeID["cstring"] = 2275] = "cstring";
  /**
   * pseudo-type for the result of an event trigger function
   */

  PgDataTypeID[PgDataTypeID["event_trigger"] = 3838] = "event_trigger";
  /**
   * pseudo-type for the result of an FDW handler function
   */

  PgDataTypeID[PgDataTypeID["fdw_handler"] = 3115] = "fdw_handler";
  /**
   * pseudo-type for the result of an index AM handler function
   */

  PgDataTypeID[PgDataTypeID["index_am_handler"] = 325] = "index_am_handler";
  /**
   * pseudo-type representing an internal data structure
   */

  PgDataTypeID[PgDataTypeID["internal"] = 2281] = "internal";
  /**
   * pseudo-type for the result of a language handler function
   */

  PgDataTypeID[PgDataTypeID["language_handler"] = 2280] = "language_handler";
  /**
   * obsolete, deprecated pseudo-type
   */

  PgDataTypeID[PgDataTypeID["opaque"] = 2282] = "opaque";
  /**
   * internal type for passing CollectedCommand
   */

  PgDataTypeID[PgDataTypeID["pg_ddl_command"] = 32] = "pg_ddl_command";
  /**
   * pseudo-type representing any composite type
   */

  PgDataTypeID[PgDataTypeID["record"] = 2249] = "record";
  PgDataTypeID[PgDataTypeID["table_am_handler"] = 269] = "table_am_handler";
  /**
   * pseudo-type for the result of a trigger function
   */

  PgDataTypeID[PgDataTypeID["trigger"] = 2279] = "trigger";
  /**
   * pseudo-type for the result of a tablesample method function
   */

  PgDataTypeID[PgDataTypeID["tsm_handler"] = 3310] = "tsm_handler";
  /**
   * pseudo-type for the result of a function with no real result
   */

  PgDataTypeID[PgDataTypeID["void"] = 2278] = "void"; // === DateTime ===

  /**
   * absolute, limited-range date and time (Unix system time)
   */

  PgDataTypeID[PgDataTypeID["abstime"] = 702] = "abstime";
  /**
   * date
   */

  PgDataTypeID[PgDataTypeID["date"] = 1082] = "date";
  /**
   * time of day
   */

  PgDataTypeID[PgDataTypeID["time"] = 1083] = "time";
  /**
   * date and time
   */

  PgDataTypeID[PgDataTypeID["timestamp"] = 1114] = "timestamp";
  /**
   * date and time with time zone
   */

  PgDataTypeID[PgDataTypeID["timestamptz"] = 1184] = "timestamptz";
  /**
   * time of day with time zone
   */

  PgDataTypeID[PgDataTypeID["timetz"] = 1266] = "timetz"; // === UserDefined ===

  /**
   * access control list
   */

  PgDataTypeID[PgDataTypeID["aclitem"] = 1033] = "aclitem";
  /**
   * variable-length string, binary values escaped
   */

  PgDataTypeID[PgDataTypeID["bytea"] = 17] = "bytea";
  /**
   * command identifier type, sequence in transaction id
   */

  PgDataTypeID[PgDataTypeID["cid"] = 29] = "cid";
  /**
   * GiST index internal text representation for text search
   */

  PgDataTypeID[PgDataTypeID["gtsvector"] = 3642] = "gtsvector";
  /**
   * JSON stored as text
   */

  PgDataTypeID[PgDataTypeID["json"] = 114] = "json";
  /**
   * Binary JSON
   */

  PgDataTypeID[PgDataTypeID["jsonb"] = 3802] = "jsonb";
  /**
   * JSON path
   */

  PgDataTypeID[PgDataTypeID["jsonpath"] = 4072] = "jsonpath";
  /**
   * XX:XX:XX:XX:XX:XX, MAC address
   */

  PgDataTypeID[PgDataTypeID["macaddr"] = 829] = "macaddr";
  /**
   * XX:XX:XX:XX:XX:XX:XX:XX, MAC address
   */

  PgDataTypeID[PgDataTypeID["macaddr8"] = 774] = "macaddr8";
  /**
   * PostgreSQL LSN datatype
   */

  PgDataTypeID[PgDataTypeID["pg_lsn"] = 3220] = "pg_lsn";
  /**
   * snapshot
   */

  PgDataTypeID[PgDataTypeID["pg_snapshot"] = 5038] = "pg_snapshot";
  /**
   * reference to cursor (portal name)
   */

  PgDataTypeID[PgDataTypeID["refcursor"] = 1790] = "refcursor";
  /**
   * storage manager
   */

  PgDataTypeID[PgDataTypeID["smgr"] = 210] = "smgr";
  /**
   * (block, offset), physical location of tuple
   */

  PgDataTypeID[PgDataTypeID["tid"] = 27] = "tid";
  /**
   * query representation for text search
   */

  PgDataTypeID[PgDataTypeID["tsquery"] = 3615] = "tsquery";
  /**
   * text representation for text search
   */

  PgDataTypeID[PgDataTypeID["tsvector"] = 3614] = "tsvector";
  /**
   * txid snapshot
   */

  PgDataTypeID[PgDataTypeID["txid_snapshot"] = 2970] = "txid_snapshot";
  /**
   * UUID datatype
   */

  PgDataTypeID[PgDataTypeID["uuid"] = 2950] = "uuid";
  /**
   * transaction id
   */

  PgDataTypeID[PgDataTypeID["xid"] = 28] = "xid";
  /**
   * full transaction id
   */

  PgDataTypeID[PgDataTypeID["xid8"] = 5069] = "xid8";
  /**
   * XML content
   */

  PgDataTypeID[PgDataTypeID["xml"] = 142] = "xml"; // === BitString ===

  /**
   * fixed-length bit string
   */

  PgDataTypeID[PgDataTypeID["bit"] = 1560] = "bit";
  /**
   * variable-length bit string
   */

  PgDataTypeID[PgDataTypeID["varbit"] = 1562] = "varbit"; // === Boolean ===

  /**
   * boolean, 'true'/'false'
   */

  PgDataTypeID[PgDataTypeID["bool"] = 16] = "bool"; // === Geometric ===

  /**
   * geometric box '(lower left,upper right)'
   */

  PgDataTypeID[PgDataTypeID["box"] = 603] = "box";
  /**
   * geometric circle '(center,radius)'
   */

  PgDataTypeID[PgDataTypeID["circle"] = 718] = "circle";
  /**
   * geometric line
   */

  PgDataTypeID[PgDataTypeID["line"] = 628] = "line";
  /**
   * geometric line segment '(pt1,pt2)'
   */

  PgDataTypeID[PgDataTypeID["lseg"] = 601] = "lseg";
  /**
   * geometric path '(pt1,...)'
   */

  PgDataTypeID[PgDataTypeID["path"] = 602] = "path";
  /**
   * geometric point '(x, y)'
   */

  PgDataTypeID[PgDataTypeID["point"] = 600] = "point";
  /**
   * geometric polygon '(pt1,...)'
   */

  PgDataTypeID[PgDataTypeID["polygon"] = 604] = "polygon"; // === String ===

  /**
   * char(length), blank-padded string, fixed storage length
   */

  PgDataTypeID[PgDataTypeID["bpchar"] = 1042] = "bpchar";
  /**
   * single character
   */

  PgDataTypeID[PgDataTypeID["char"] = 18] = "char";
  /**
   * 63-byte type for storing system identifiers
   */

  PgDataTypeID[PgDataTypeID["name"] = 19] = "name";
  /**
   * multivariate dependencies
   */

  PgDataTypeID[PgDataTypeID["pg_dependencies"] = 3402] = "pg_dependencies";
  /**
   * multivariate MCV list
   */

  PgDataTypeID[PgDataTypeID["pg_mcv_list"] = 5017] = "pg_mcv_list";
  /**
   * multivariate ndistinct coefficients
   */

  PgDataTypeID[PgDataTypeID["pg_ndistinct"] = 3361] = "pg_ndistinct";
  /**
   * string representing an internal node tree
   */

  PgDataTypeID[PgDataTypeID["pg_node_tree"] = 194] = "pg_node_tree";
  /**
   * variable-length string, no limit specified
   */

  PgDataTypeID[PgDataTypeID["text"] = 25] = "text";
  /**
   * varchar(length), non-blank-padded string, variable storage length
   */

  PgDataTypeID[PgDataTypeID["varchar"] = 1043] = "varchar"; // === NetworkAddress ===

  /**
   * network IP address/netmask, network address
   */

  PgDataTypeID[PgDataTypeID["cidr"] = 650] = "cidr";
  /**
   * IP address/netmask, host address, netmask optional
   */

  PgDataTypeID[PgDataTypeID["inet"] = 869] = "inet"; // === Range ===

  /**
   * range of dates
   */

  PgDataTypeID[PgDataTypeID["daterange"] = 3912] = "daterange";
  /**
   * range of integers
   */

  PgDataTypeID[PgDataTypeID["int4range"] = 3904] = "int4range";
  /**
   * range of bigints
   */

  PgDataTypeID[PgDataTypeID["int8range"] = 3926] = "int8range";
  /**
   * range of numerics
   */

  PgDataTypeID[PgDataTypeID["numrange"] = 3906] = "numrange";
  /**
   * range of timestamps without time zone
   */

  PgDataTypeID[PgDataTypeID["tsrange"] = 3908] = "tsrange";
  /**
   * range of timestamps with time zone
   */

  PgDataTypeID[PgDataTypeID["tstzrange"] = 3910] = "tstzrange"; // === Numeric ===

  /**
   * single-precision floating point number, 4-byte storage
   */

  PgDataTypeID[PgDataTypeID["float4"] = 700] = "float4";
  /**
   * double-precision floating point number, 8-byte storage
   */

  PgDataTypeID[PgDataTypeID["float8"] = 701] = "float8";
  /**
   * -32 thousand to 32 thousand, 2-byte storage
   */

  PgDataTypeID[PgDataTypeID["int2"] = 21] = "int2";
  /**
   * -2 billion to 2 billion integer, 4-byte storage
   */

  PgDataTypeID[PgDataTypeID["int4"] = 23] = "int4";
  /**
   * ~18 digit integer, 8-byte storage
   */

  PgDataTypeID[PgDataTypeID["int8"] = 20] = "int8";
  /**
   * monetary amounts, $d,ddd.cc
   */

  PgDataTypeID[PgDataTypeID["money"] = 790] = "money";
  /**
   * numeric(precision, decimal), arbitrary precision number
   */

  PgDataTypeID[PgDataTypeID["numeric"] = 1700] = "numeric";
  /**
   * object identifier(oid), maximum 4 billion
   */

  PgDataTypeID[PgDataTypeID["oid"] = 26] = "oid";
  /**
   * registered class
   */

  PgDataTypeID[PgDataTypeID["regclass"] = 2205] = "regclass";
  /**
   * registered collation
   */

  PgDataTypeID[PgDataTypeID["regcollation"] = 4191] = "regcollation";
  /**
   * registered text search configuration
   */

  PgDataTypeID[PgDataTypeID["regconfig"] = 3734] = "regconfig";
  /**
   * registered text search dictionary
   */

  PgDataTypeID[PgDataTypeID["regdictionary"] = 3769] = "regdictionary";
  /**
   * registered namespace
   */

  PgDataTypeID[PgDataTypeID["regnamespace"] = 4089] = "regnamespace";
  /**
   * registered operator
   */

  PgDataTypeID[PgDataTypeID["regoper"] = 2203] = "regoper";
  /**
   * registered operator (with args)
   */

  PgDataTypeID[PgDataTypeID["regoperator"] = 2204] = "regoperator";
  /**
   * registered procedure
   */

  PgDataTypeID[PgDataTypeID["regproc"] = 24] = "regproc";
  /**
   * registered procedure (with args)
   */

  PgDataTypeID[PgDataTypeID["regprocedure"] = 2202] = "regprocedure";
  /**
   * registered role
   */

  PgDataTypeID[PgDataTypeID["regrole"] = 4096] = "regrole";
  /**
   * registered type
   */

  PgDataTypeID[PgDataTypeID["regtype"] = 2206] = "regtype"; // === Timespan ===

  /**
   * @ <number> <units>, time interval
   */

  PgDataTypeID[PgDataTypeID["interval"] = 1186] = "interval";
  /**
   * relative, limited-range time interval (Unix delta time)
   */

  PgDataTypeID[PgDataTypeID["reltime"] = 703] = "reltime";
  /**
   * (abstime,abstime), time interval
   */

  PgDataTypeID[PgDataTypeID["tinterval"] = 704] = "tinterval"; // === Unknown ===

  /**
   * pseudo-type representing an undetermined type
   */

  PgDataTypeID[PgDataTypeID["unknown"] = 705] = "unknown";
})(PgDataTypeID || (PgDataTypeID = {}));

exports.default = PgDataTypeID;
module.exports = PgDataTypeID;
module.exports.default = PgDataTypeID;