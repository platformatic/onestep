"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const fs_1 = require("fs");

const util_1 = require("util");

const __1 = require("..");

const examples = [// Examples from https://www.postgresql.org/docs/13/libpq-connect.html
'host=localhost port=5432 dbname=mydb connect_timeout=10', 'postgresql://', 'postgresql://localhost', 'postgresql://localhost:5433', 'postgresql://localhost/mydb', 'postgresql://user@localhost', 'postgresql://user:secret@localhost', 'postgresql://other@localhost/otherdb?connect_timeout=10&application_name=myapp', 'postgresql://host1:123,host2:456/somedb?target_session_attrs=any&application_name=myapp', // custom examples
`host=localhost port=5432 dbname=mydb connect_timeout=10 user='my name' password='my\\'password'`, // using environment variables
{
  connectionString: undefined,
  env: {
    PGREQUIRESSL: '1'
  }
}, {
  connectionString: 'postgresql://example.com',
  env: {
    PGHOST: 'localhost',
    PGUSER: 'my_name',
    PGPASSWORD: 'my_password'
  }
}, {
  connectionString: 'postgresql://my_name:my_password@example.com/my_db',
  env: {
    PGSSLMODE: 'require'
  }
}];
test('parseConnectionString', () => {
  var _a;

  const results = {};

  for (const example of examples) {
    const key = typeof example === 'string' ? `Env: {} Connection String: ${example !== null && example !== void 0 ? example : undefined}` : `Env: ${util_1.inspect(example.env)} Connection String: ${(_a = example.connectionString) !== null && _a !== void 0 ? _a : undefined}`;

    try {
      results[key] = __1.default(typeof example === 'string' ? example : example.connectionString, {
        invalidOptionMode: 'error',
        unrecognisedOptionMode: 'error',
        env: typeof example === 'string' ? {} : example.env
      });
    } catch (ex) {
      results[key] = ex.message;
    }
  }

  if (process.env.CI) {
    expect(results).toEqual(JSON.parse(fs_1.readFileSync(`${__dirname}/snapshots.json`, 'utf8')));
  } else {
    const output = JSON.stringify(results, null, '  ') + '\n';

    if (output !== fs_1.readFileSync(`${__dirname}/snapshots.json`, 'utf8')) {
      fs_1.writeFileSync(`${__dirname}/snapshots.json`, output);
    }
  }
});