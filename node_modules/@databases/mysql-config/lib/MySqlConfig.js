"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MySqlConfigSchema = exports.TypesConfigSchema = exports.MySqlTypesPrimaryKeyTypeMode = exports.TestConfigSchema = void 0;
const ft = require("funtypes");
function withDefault(type, defaultValue) {
    return ft.Union(type, ft.Undefined.withParser({
        parse() {
            return { success: true, value: defaultValue };
        },
        name: `undefined`,
    }));
}
function integer({ min = -Math.pow(2, 31), max = Math.pow(2, 32), }) {
    return ft.Number.withConstraint((value) => {
        if (value !== Math.floor(value)) {
            return `Expected an integer but got ${value}`;
        }
        if (value < min || value > max) {
            return `Expected an integer between ${min} and ${max} but got ${value}`;
        }
        return true;
    }, { name: `Integer` });
}
exports.TestConfigSchema = ft
    .Object({
    debug: withDefault(ft.Boolean, false),
    migrationsScript: ft.Union(ft.String, ft.Array(ft.String), ft.Undefined),
    image: withDefault(ft.String, `mysql:8.0.23`),
    containerName: withDefault(ft.String, `mysql-test`),
    connectTimeoutSeconds: withDefault(integer({ min: 0 }), 20),
    port: withDefault(integer({ min: 0, max: 65535 }), undefined),
    mySqlUser: withDefault(ft.String, `test-user`),
    mySqlPassword: withDefault(ft.String, `password`),
    mySqlDb: withDefault(ft.String, `test-db`),
})
    .withConstraint((value) => true, { name: `TestConfig` });
var MySqlTypesPrimaryKeyTypeMode;
(function (MySqlTypesPrimaryKeyTypeMode) {
    MySqlTypesPrimaryKeyTypeMode["strict_brand"] = "strict_brand";
    MySqlTypesPrimaryKeyTypeMode["loose_brand"] = "loose_brand";
    MySqlTypesPrimaryKeyTypeMode["inline_strict_brand"] = "inline_strict_brand";
    MySqlTypesPrimaryKeyTypeMode["inline_loose_brand"] = "inline_loose_brand";
    MySqlTypesPrimaryKeyTypeMode["inline_no_brand"] = "inline_no_brand";
})(MySqlTypesPrimaryKeyTypeMode = exports.MySqlTypesPrimaryKeyTypeMode || (exports.MySqlTypesPrimaryKeyTypeMode = {}));
exports.TypesConfigSchema = ft
    .Object({
    directory: withDefault(ft.String, `__generated__`),
    primaryKeyTypeMode: withDefault(ft.Enum(`MySqlTypesPrimaryKeyTypeMode`, MySqlTypesPrimaryKeyTypeMode), MySqlTypesPrimaryKeyTypeMode.inline_loose_brand),
    primaryKeyTypeName: withDefault(ft.String, `{{ TABLE_NAME | pascal-case }}_{{ COLUMN_NAME | pascal-case }}`),
    primaryKeyFileName: withDefault(ft.String, `{{ TABLE_NAME }}.ts`),
    tableTypeName: withDefault(ft.String, `{{ TABLE_NAME | pascal-case }}`),
    tableFileName: withDefault(ft.String, `{{ TABLE_NAME }}.ts`),
    tableInsertParametersTypeName: withDefault(ft.String, `{{ TABLE_NAME | pascal-case }}_InsertParameters`),
    tableInsertParametersFileName: withDefault(ft.String, `{{ TABLE_NAME }}.ts`),
    schemaTypeName: withDefault(ft.String, `DatabaseSchema`),
    schemaFileName: withDefault(ft.String, `index.ts`),
    serializeValueTypeName: withDefault(ft.String, `serializeValue`),
    serializeValueFileName: withDefault(ft.String, `index.ts`),
    columnTypeOverrides: withDefault(ft.Record(ft.String, ft.String), {}),
    typeOverrides: withDefault(ft.Record(ft.String, ft.String), {}),
    includeTables: withDefault(ft.Union(ft.Array(ft.String), ft.Null), null),
    ignoreTables: withDefault(ft.Array(ft.String), []),
})
    .withConstraint((value) => true, { name: `TypesConfig` });
exports.MySqlConfigSchema = ft.Object({
    connectionStringEnvironmentVariable: withDefault(ft.String, `DATABASE_URL`),
    test: withDefault(exports.TestConfigSchema, exports.TestConfigSchema.parse({})),
    types: withDefault(exports.TypesConfigSchema, exports.TypesConfigSchema.parse({})),
});
//# sourceMappingURL=MySqlConfig.js.map