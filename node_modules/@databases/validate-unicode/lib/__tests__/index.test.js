"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const __1 = require("..");

const pairEscaped = '\ud83d\ude00';
const pairUnescaped = 'ðŸ˜€';
const escapedInvalidCharPlaceholder = '\uFFFD';
const invalidCharPlaceholder = 'ï¿½';
test('Our unicode symbol is made of two surrogate pairs', () => {
  expect(pairEscaped).toBe(pairUnescaped);
  expect(escapedInvalidCharPlaceholder).toBe(invalidCharPlaceholder);
});
test('removeInvalidUnicode', () => {
  expect(__1.removeInvalidUnicode(pairUnescaped)).toBe(pairUnescaped);
  expect(__1.removeInvalidUnicode(pairUnescaped[0])).toBe(invalidCharPlaceholder);
  expect(__1.removeInvalidUnicode(pairUnescaped[1])).toBe(invalidCharPlaceholder);
  expect(__1.removeInvalidUnicode(`helloðŸ˜€`)).toBe(`helloðŸ˜€`);
  expect(__1.removeInvalidUnicode(`ðŸ˜€world`)).toBe(`ðŸ˜€world`);
  expect(__1.removeInvalidUnicode(`helloðŸ˜€world`)).toBe(`helloðŸ˜€world`);
  expect(__1.removeInvalidUnicode(`hello${pairUnescaped[0]}`)).toBe(`hello${invalidCharPlaceholder}`);
  expect(__1.removeInvalidUnicode(`${pairUnescaped[0]}world`)).toBe(`${invalidCharPlaceholder}world`);
  expect(__1.removeInvalidUnicode(`hello${pairUnescaped[0]}world`)).toBe(`hello${invalidCharPlaceholder}world`);
  expect(__1.removeInvalidUnicode(`hello${pairUnescaped[1]}world`)).toBe(`hello${invalidCharPlaceholder}world`);
});
test('isValidUnicode', () => {
  expect(__1.isValidUnicode(pairUnescaped)).toBe(true);
  expect(__1.isValidUnicode(pairUnescaped[0])).toBe(false);
  expect(__1.isValidUnicode(pairUnescaped[1])).toBe(false);
  expect(__1.isValidUnicode(`helloðŸ˜€world`)).toBe(true);
  expect(__1.isValidUnicode(`helloðŸ˜€`)).toBe(true);
  expect(__1.isValidUnicode(`ðŸ˜€world`)).toBe(true);
  expect(__1.isValidUnicode(`hello${pairUnescaped[0]}world`)).toBe(false);
  expect(__1.isValidUnicode(`hello${pairUnescaped[1]}world`)).toBe(false);
  expect(__1.isValidUnicode(`${pairUnescaped[0]}world`)).toBe(false);
  expect(__1.isValidUnicode(`${pairUnescaped[1]}world`)).toBe(false);
  expect(__1.isValidUnicode(`hello${pairUnescaped[0]}`)).toBe(false);
  expect(__1.isValidUnicode(`hello${pairUnescaped[1]}`)).toBe(false);
});
test('assertValidUnicode', () => {
  expect(() => __1.default(pairUnescaped)).not.toThrow();
  expect(() => __1.default(pairUnescaped[0])).toThrowError(`This string contains unmatched surrogate pairs: "\\ud83d"`);
  expect(() => __1.default(pairUnescaped[1])).toThrowError(`This string contains unmatched surrogate pairs: "\\ude00"`);
  expect(() => __1.default(`helloðŸ˜€world`)).not.toThrow();
  expect(() => __1.default(`hello${pairUnescaped[0]}world`)).toThrowError(`This string contains unmatched surrogate pairs: "hello\\ud83dworld"`);
  expect(() => __1.default(`hello${pairUnescaped[1]}world`)).toThrowError(`This string contains unmatched surrogate pairs: "hello\\ude00world"`);
});