export declare enum PoolRecordState {
    Idle = 0,
    Active = 1,
    Disposed = 2
}
export default interface IPoolRecord<T> {
    state: PoolRecordState;
    connection: T | undefined;
    activateCount: number;
    shouldDestroy: boolean;
    idleTimeout: number | undefined;
}
export interface IIdlePoolRecord<T> extends IPoolRecord<T> {
    readonly state: PoolRecordState.Idle;
    readonly connection: T;
}
export interface IActivePoolRecord<T> extends IPoolRecord<T> {
    readonly state: PoolRecordState.Active;
    readonly connection: T;
}
export interface IDisposedPoolRecord<T> extends IPoolRecord<T> {
    readonly state: PoolRecordState.Disposed;
    readonly connection: undefined;
}
declare function setRecordState<T>(record: IActivePoolRecord<T>, state: PoolRecordState.Idle, onTimeout: (record: IIdlePoolRecord<T>) => void, timeoutMilliseconds: number | undefined): IIdlePoolRecord<T>;
declare function setRecordState<T>(record: IActivePoolRecord<T> | IIdlePoolRecord<T>, state: PoolRecordState.Active): IActivePoolRecord<T>;
declare function setRecordState<T>(record: IActivePoolRecord<T> | IIdlePoolRecord<T>, state: PoolRecordState.Disposed): IDisposedPoolRecord<T>;
export { setRecordState };
export declare function isActivePoolRecord<T>(record: IPoolRecord<T>): record is IActivePoolRecord<T>;
export declare function isIdlePoolRecord<T>(record: IPoolRecord<T>): record is IIdlePoolRecord<T>;
export declare function isDisposedPoolRecord<T>(record: IPoolRecord<T>): record is IDisposedPoolRecord<T>;
export declare function getPoolRecord<T>(connection: T): IIdlePoolRecord<T>;
