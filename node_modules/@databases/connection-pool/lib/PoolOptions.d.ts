import { Timeout } from './utils/timeout';
/**
 * Options for configuring a connection pool
 */
export default interface PoolOptions<T> {
    /**
     * `getConnection` is used to create a new connection. If it
     * throws an error, no connection is added to the pool.
     */
    openConnection: (removeFromPool: () => void) => Promise<T>;
    /**
     * `closeConnection` is called in any of the following cases:
     *
     * 1. The connection is unused for `idleTimeoutMilliseconds`
     * 2. The connection has been used more than `maxUses`
     * 3. `.dispose()` is called after aquiring a connection
     * 4. `.drain()` has been called on the connection pool
     *
     * N.B. If `closeConnection` throws an error, your app will
     * crash. It is up to you to handle any errors that may happen
     * while closing a connection.
     */
    closeConnection: (connection: T) => Promise<void>;
    /**
     * Handler to be called every time a connection from the pool
     * is activated.
     */
    onActive?: (connetion: T) => void;
    /**
     * Handler to be called every time a connection is returned
     * to the pool.
     */
    onIdle?: (connetion: T) => void;
    /**
     * Handler for when neither `release` nor `dispose` is
     * called within `releaseTimeoutMilliseconds`. This is
     * called instead of `closeConnection`, so it should
     * ensure the connection is properly closed. If you set
     * `releaseTimeoutMilliseconds`, you must also provide an
     * implementation of `onReleaseTimeout`.
     */
    onReleaseTimeout?: (connetion: T) => Promise<void>;
    /**
     * The maximum number of connections that can be created
     * in the pool at any one time.
     *
     * @default Infinity
     */
    maxSize?: number;
    /**
     * The maximum number of times a connection can be returned
     * from the pool before it is automatically disposed of and
     * a new connection is allocated.
     *
     * @default Infinity
     */
    maxUses?: number;
    /**
     * How many milliseconds a connection can be idle before it
     * is automatically closed and removed from the pool.
     *
     * @default Infinity
     */
    idleTimeoutMilliseconds?: number;
    /**
     * How many milliseconds is a task allowed to run before releasing
     * the connection.
     *
     * N.B. If you supply a value for `releaseTimeoutMilliseconds`, you
     * should always implement `onReleaseTimeout` otherwise your application
     * will simply crash if this timeout is reached.
     *
     * @default Infinity
     */
    releaseTimeoutMilliseconds?: number;
    /**
     * How many milliseconds to wait in the queue for a connection
     * before rejecting with a timeout error.
     *
     * @default Infinity
     */
    queueTimeoutMilliseconds?: number;
    /**
     * How many milliseconds to wait for a connection to open.
     *
     * @default 60_000
     */
    openConnectionTimeoutMilliseconds?: number;
    /**
     * How many milliseconds to wait for a connection to close.
     *
     * @default 60_000
     */
    closeConnectionTimeoutMilliseconds?: number;
    onTimeoutClosingConnection?: () => void;
    onErrorClosingConnection?: (err: Error) => void;
    isConnectionLimitError?: (err: Error) => void;
    /**
     * How long to wait before retrying on a connection limit error.
     *
     * @default 5_000
     */
    connectionLimitBackoffMilliseconds?: number;
}
export declare class PoolOptionsObject<T> {
    private readonly _options;
    /**
     * The maximum number of connections that can be created
     * in the pool at any one time.
     *
     * @default Infinity
     */
    maxSize: number;
    /**
     * The maximum number of times a connection can be returned
     * from the pool before it is automatically disposed of and
     * a new connection is allocated.
     *
     * @default Infinity
     */
    readonly maxUses: number;
    /**
     * How many milliseconds a connection can be idle before it
     * is automatically closed and removed from the pool.
     *
     * @default Infinity
     */
    readonly idleTimeoutMilliseconds: number;
    /**
     * How many milliseconds is a task allowed to run before releasing
     * the connection.
     *
     * N.B. If you supply a value for `releaseTimeoutMilliseconds`, you
     * should always implement `onReleaseTimeout` otherwise your application
     * will simply crash if this timeout is reached.
     *
     * @default Infinity
     */
    readonly releaseTimeoutMilliseconds: number;
    /**
     * How many milliseconds to wait in the queue for a connection
     * before rejecting with a timeout error.
     *
     * @default Infinity
     */
    readonly queueTimeoutMilliseconds: number;
    /**
     * How long to wait before retrying on a connection limit error.
     *
     * @default 5_000
     */
    readonly connectionLimitBackoffMilliseconds: number;
    private readonly _openConnectionTimeoutMilliseconds;
    private readonly _closeConnectionTimeoutMilliseconds;
    constructor(options: PoolOptions<T>);
    private readonly _onConnectionAfterTimeout;
    openConnection(removeFromPool: () => void): Promise<T | Timeout>;
    private readonly _onConnectionClosed;
    private readonly _onConnectionError;
    closeConnection(connection: T): Promise<void>;
    onActive(connection: T): Error | undefined;
    onIdle(connection: T): Error | undefined;
    onReleaseTimeout(connection: T): void;
    isConnectionLimitError(err: Error): false | void;
}
