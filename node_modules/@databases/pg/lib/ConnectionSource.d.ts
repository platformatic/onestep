/// <reference types="node" />
import { ConnectionOptions } from 'tls';
import PgDriver from './Driver';
import TypeOverrides from './TypeOverrides';
import EventHandlers from './types/EventHandlers';
declare type SSLConfig = null | {
    allowFallback: boolean;
    connectionOptions: ConnectionOptions;
};
export interface PgOptions {
    user: string | undefined;
    password: string | undefined;
    database: string | undefined;
    connectionTimeoutMillis: number;
    statement_timeout?: number;
    query_timeout?: number;
    idle_in_transaction_session_timeout?: number;
    application_name?: string;
    keepAlive: boolean;
    keepAliveInitialDelayMillis: number;
    types: TypeOverrides;
    hosts: {
        host: string;
        port?: number | undefined;
    }[];
    ssl: SSLConfig;
}
export default function createConnectionSource({ hosts, ssl, ...partialOptions }: PgOptions, handlers: EventHandlers, acquireLockTimeoutMilliseconds: number): () => Promise<PgDriver>;
export {};
