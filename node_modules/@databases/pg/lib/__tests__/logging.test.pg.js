"use strict";
/* tslint:disable:no-console */
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const sql_1 = require("@databases/sql");
jest.setTimeout(30000);
test('logging', async () => {
    const events = [];
    const eventCatcher = (name) => (query, ...args) => {
        expect((0, sql_1.isSqlQuery)(query)).toBe(true);
        events.push(`${name}(SQLQuery, ${args
            .map((a) => a instanceof Error ? a.message : JSON.stringify(a, null, '  '))
            .join(', ')
            // .replace(/\\n/g, '\n')
            .replace(/\"/g, `'`)
            .replace(/\n/gm, '\n  ')})`);
    };
    const db = (0, __1.default)({
        bigIntMode: 'bigint',
        onQueryStart: eventCatcher('onQueryStart'),
        onQueryResults: eventCatcher('onQueryResults'),
        onQueryError: eventCatcher('onQueryError'),
    });
    await db.query((0, sql_1.default) `CREATE SCHEMA logging`);
    await db.query((0, sql_1.default) `
      CREATE TABLE logging.accounts (
        email TEXT NOT NULL PRIMARY KEY,
        balance BIGINT NOT NULL
      );
    `);
    await db.query((0, sql_1.default) `
    INSERT INTO logging.accounts (email, balance)
    VALUES
      (
        ${'forbes@lindesay.co.uk'},
        ${100}
      ),
      (
        ${'dee@lindesay.co.uk'},
        ${200}
      );
  `);
    await db.tx(async (db) => {
        await db.query((0, sql_1.default) `UPDATE logging.accounts SET balance=${200} WHERE email=${'forbes@lindesay.co.uk'}`);
        await db.query((0, sql_1.default) `UPDATE logging.accounts SET balance=${100} WHERE email=${'dee@lindesay.co.uk'}`);
    });
    await db.tx(async (db) => {
        await db.query([
            (0, sql_1.default) `UPDATE logging.accounts SET balance=${100} WHERE email=${'forbes@lindesay.co.uk'}`,
            (0, sql_1.default) `UPDATE logging.accounts SET balance=${200} WHERE email=${'dee@lindesay.co.uk'}`,
        ]);
    });
    await db.tx(async (db) => {
        await db.query((0, sql_1.default) `
      UPDATE logging.accounts SET balance=${100} WHERE email=${'forbes@lindesay.co.uk'};
      UPDATE logging.accounts SET balance=${200} WHERE email=${'dee@lindesay.co.uk'};
    `);
    });
    await db
        .query([
        (0, sql_1.default) `
        UPDATE logging.accounts SET bal=${100} WHERE email=${'forbes@lindesay.co.uk'};
      `,
    ])
        .then(() => {
        throw new Error('Expected an error to be thrown');
    }, () => {
        // ignoring the error
    });
    expect(events).toMatchInlineSnapshot(`
    Array [
      "onQueryStart(SQLQuery, {
        'text': 'CREATE SCHEMA logging',
        'values': []
      })",
      "onQueryResults(SQLQuery, {
        'text': 'CREATE SCHEMA logging',
        'values': []
      }, [])",
      "onQueryStart(SQLQuery, {
        'text': 'CREATE TABLE logging.accounts (\\\\n  email TEXT NOT NULL PRIMARY KEY,\\\\n  balance BIGINT NOT NULL\\\\n);',
        'values': []
      })",
      "onQueryResults(SQLQuery, {
        'text': 'CREATE TABLE logging.accounts (\\\\n  email TEXT NOT NULL PRIMARY KEY,\\\\n  balance BIGINT NOT NULL\\\\n);',
        'values': []
      }, [])",
      "onQueryStart(SQLQuery, {
        'text': 'INSERT INTO logging.accounts (email, balance)\\\\nVALUES\\\\n  (\\\\n    $1,\\\\n    $2\\\\n  ),\\\\n  (\\\\n    $3,\\\\n    $4\\\\n  );',
        'values': [
          'forbes@lindesay.co.uk',
          100,
          'dee@lindesay.co.uk',
          200
        ]
      })",
      "onQueryResults(SQLQuery, {
        'text': 'INSERT INTO logging.accounts (email, balance)\\\\nVALUES\\\\n  (\\\\n    $1,\\\\n    $2\\\\n  ),\\\\n  (\\\\n    $3,\\\\n    $4\\\\n  );',
        'values': [
          'forbes@lindesay.co.uk',
          100,
          'dee@lindesay.co.uk',
          200
        ]
      }, [])",
      "onQueryStart(SQLQuery, {
        'text': 'UPDATE logging.accounts SET balance=$1 WHERE email=$2',
        'values': [
          200,
          'forbes@lindesay.co.uk'
        ]
      })",
      "onQueryResults(SQLQuery, {
        'text': 'UPDATE logging.accounts SET balance=$1 WHERE email=$2',
        'values': [
          200,
          'forbes@lindesay.co.uk'
        ]
      }, [])",
      "onQueryStart(SQLQuery, {
        'text': 'UPDATE logging.accounts SET balance=$1 WHERE email=$2',
        'values': [
          100,
          'dee@lindesay.co.uk'
        ]
      })",
      "onQueryResults(SQLQuery, {
        'text': 'UPDATE logging.accounts SET balance=$1 WHERE email=$2',
        'values': [
          100,
          'dee@lindesay.co.uk'
        ]
      }, [])",
      "onQueryStart(SQLQuery, {
        'text': 'UPDATE logging.accounts SET balance=$1 WHERE email=$2',
        'values': [
          100,
          'forbes@lindesay.co.uk'
        ]
      })",
      "onQueryResults(SQLQuery, {
        'text': 'UPDATE logging.accounts SET balance=$1 WHERE email=$2',
        'values': [
          100,
          'forbes@lindesay.co.uk'
        ]
      }, [])",
      "onQueryStart(SQLQuery, {
        'text': 'UPDATE logging.accounts SET balance=$1 WHERE email=$2',
        'values': [
          200,
          'dee@lindesay.co.uk'
        ]
      })",
      "onQueryResults(SQLQuery, {
        'text': 'UPDATE logging.accounts SET balance=$1 WHERE email=$2',
        'values': [
          200,
          'dee@lindesay.co.uk'
        ]
      }, [])",
      "onQueryStart(SQLQuery, {
        'text': 'UPDATE logging.accounts SET balance=$1 WHERE email=$2',
        'values': [
          100,
          'forbes@lindesay.co.uk'
        ]
      })",
      "onQueryResults(SQLQuery, {
        'text': 'UPDATE logging.accounts SET balance=$1 WHERE email=$2',
        'values': [
          100,
          'forbes@lindesay.co.uk'
        ]
      }, [])",
      "onQueryStart(SQLQuery, {
        'text': 'UPDATE logging.accounts SET balance=$1 WHERE email=$2',
        'values': [
          200,
          'dee@lindesay.co.uk'
        ]
      })",
      "onQueryResults(SQLQuery, {
        'text': 'UPDATE logging.accounts SET balance=$1 WHERE email=$2',
        'values': [
          200,
          'dee@lindesay.co.uk'
        ]
      }, [])",
      "onQueryStart(SQLQuery, {
        'text': 'UPDATE logging.accounts SET bal=$1 WHERE email=$2;',
        'values': [
          100,
          'forbes@lindesay.co.uk'
        ]
      })",
      "onQueryError(SQLQuery, {
        'text': 'UPDATE logging.accounts SET bal=$1 WHERE email=$2;',
        'values': [
          100,
          'forbes@lindesay.co.uk'
        ]
      }, column 'bal' of relation 'accounts' does not exist
      
      > 1 | UPDATE logging.accounts SET bal=$1 WHERE email=$2;
          |                             ^^^^^^^^
      )",
    ]
  `);
    await db.dispose();
});
const mockConsole = {
    log: jest.fn(),
};
test('docs examples - simple', async () => {
    const console = mockConsole;
    const db = (0, __1.default)({
        bigIntMode: 'bigint',
        onQueryStart: (_query, { text, values }) => {
            console.log(`${new Date().toISOString()} START QUERY ${text} - ${JSON.stringify(values)}`);
        },
        onQueryResults: (_query, { text }, results) => {
            console.log(`${new Date().toISOString()} END QUERY   ${text} - ${results.length} results`);
        },
        onQueryError: (_query, { text }, err) => {
            console.log(`${new Date().toISOString()} ERROR QUERY ${text} - ${err.message}`);
        },
    });
    await db.tx(async (db) => {
        await db.query((0, sql_1.default) `UPDATE logging.accounts SET balance=${200} WHERE email=${'forbes@lindesay.co.uk'}`);
        await db.query((0, sql_1.default) `UPDATE logging.accounts SET balance=${100} WHERE email=${'dee@lindesay.co.uk'}`);
    });
    await db.dispose();
    expect(console.log).toBeCalledTimes(4);
    console.log.mockClear();
});
test('docs examples - timing', async () => {
    const console = mockConsole;
    const startTimes = new Map();
    const db = (0, __1.default)({
        bigIntMode: 'bigint',
        onQueryStart: (query) => {
            startTimes.set(query, Date.now());
        },
        onQueryResults: (query, { text }, results) => {
            const start = startTimes.get(query);
            startTimes.delete(query);
            if (start) {
                console.log(`${text} - ${Date.now() - start}ms`);
            }
            else {
                console.log(`${text} - uknown duration`);
            }
        },
        onQueryError: (query, { text }, err) => {
            startTimes.delete(query);
            console.log(`${text} - ${err.message}`);
        },
    });
    await db.tx(async (db) => {
        await db.query((0, sql_1.default) `UPDATE logging.accounts SET balance=${200} WHERE email=${'forbes@lindesay.co.uk'}`);
        await db.query((0, sql_1.default) `UPDATE logging.accounts SET balance=${100} WHERE email=${'dee@lindesay.co.uk'}`);
    });
    await db.dispose();
    expect(console.log).toBeCalledTimes(2);
});
//# sourceMappingURL=logging.test.pg.js.map