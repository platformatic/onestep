"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Driver_1 = require("./Driver");
const definePrecondition_1 = require("./definePrecondition");
const { Client } = require('pg');
function createConnectionSource({ hosts, ssl, ...partialOptions }, handlers, acquireLockTimeoutMilliseconds) {
    var _a;
    const options = {
        ...partialOptions,
        ...hosts[0],
        ssl: (_a = ssl === null || ssl === void 0 ? void 0 : ssl.connectionOptions) !== null && _a !== void 0 ? _a : false,
    };
    const precondition = (0, definePrecondition_1.default)(async () => {
        var _a;
        const start = Date.now();
        let error;
        let attemptCount = 0;
        do {
            attemptCount++;
            if (attemptCount) {
                await new Promise((resolve) => setTimeout(resolve, attemptCount * 100));
            }
            for (const { host, port } of hosts) {
                options.host = host;
                options.port = port;
                options.ssl = (_a = ssl === null || ssl === void 0 ? void 0 : ssl.connectionOptions) !== null && _a !== void 0 ? _a : false;
                try {
                    const connection = new Driver_1.default(new Client(options), handlers, acquireLockTimeoutMilliseconds);
                    await connection.connect();
                    return connection;
                }
                catch (ex) {
                    error = ex;
                    if (options.ssl &&
                        (ssl === null || ssl === void 0 ? void 0 : ssl.allowFallback) &&
                        /the server does not support ssl connections/i.test(error.message)) {
                        // The Postgres server does not support SSL and our sslmode is "prefer"
                        // (which is the default). In this case we immediately retry without
                        // ssl.
                        try {
                            options.ssl = false;
                            const connection = new Driver_1.default(new Client(options), handlers, acquireLockTimeoutMilliseconds);
                            await connection.connect();
                            return connection;
                        }
                        catch (ex) {
                            error = ex;
                        }
                    }
                }
            }
            // If you try to connect very quickly after postgres boots (e.g. intesting environments)
            // you can get an error of "Connection terminated unexpectedly". For this reason, we retry
            // all possible connections for up to 2 seconds
        } while (Date.now() - start < 2000);
        throw error;
    });
    const getConnection = async () => {
        const firstClient = await precondition.callPrecondition();
        if (firstClient) {
            return firstClient;
        }
        else {
            try {
                const client = new Driver_1.default(new Client(options), handlers, acquireLockTimeoutMilliseconds);
                await client.connect();
                return client;
            }
            catch (ex) {
                precondition.resetPrecondition();
                return await getConnection();
            }
        }
    };
    return getConnection;
}
exports.default = createConnectionSource;
//# sourceMappingURL=ConnectionSource.js.map