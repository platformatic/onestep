import type { SQLQuery } from '@databases/sql';
import type Driver from './Driver';
import { ConnectionFactory, Disposable, TransactionFactory } from './Factory';
export declare function assertSql(query: SQLQuery | SQLQuery[]): void;
export declare function executeAndReturnAll<TTransactionOptions>(driver: Driver<TTransactionOptions, any>, queries: SQLQuery[]): Promise<any[][]>;
export declare function executeAndReturnLast<TTransactionOptions>(driver: Driver<TTransactionOptions, any>, queries: SQLQuery[]): Promise<any[]>;
export declare function queryInternal<TTransactionOptions, TResult>(driver: Driver<TTransactionOptions, any>, queries: SQLQuery[], fn: <TTransactionOptions>(driver: Driver<TTransactionOptions, any>, queries: SQLQuery[]) => Promise<TResult>): Promise<TResult>;
export declare function taskInternal<TConnection extends Disposable, TTransactionOptions, TDriver extends Driver<TTransactionOptions, any>, TResult>(driver: TDriver, factories: ConnectionFactory<TDriver, TConnection>, fn: (connection: TConnection) => Promise<TResult>): Promise<TResult>;
export declare function txInternal<TTransaction extends Disposable, TTransactionOptions, TDriver extends Driver<TTransactionOptions, any>, TResult>(driver: TDriver, factories: TransactionFactory<TDriver, TTransaction>, fn: (connection: TTransaction) => Promise<TResult>, options: TTransactionOptions | undefined, addPostCommitStep: (fn: () => Promise<void>) => void): Promise<TResult>;
