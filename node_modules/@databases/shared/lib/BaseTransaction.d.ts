import type { SQLQuery } from '@databases/sql';
import { Disposable, TransactionFactory, TransactionParentContext } from './Factory';
import Driver from './Driver';
import QueryableType from './QueryableType';
import { Lock } from '@databases/lock';
declare type QueryStreamOptions<TDriver extends Driver<any, any>> = TDriver extends Driver<any, infer TQueryStreamOptions> ? TQueryStreamOptions : unknown;
export default class BaseTransaction<TTransaction extends Disposable, TDriver extends Driver<any, any>> {
    readonly type = QueryableType.Transaction;
    protected readonly _lock: Lock;
    private _disposed;
    protected _throwIfDisposed(): void;
    protected readonly _driver: TDriver;
    private readonly _factories;
    private readonly _parentContext;
    constructor(driver: TDriver, factories: TransactionFactory<TDriver, TTransaction>, parentContext: TransactionParentContext);
    task<T>(fn: (connection: this) => Promise<T>): Promise<T>;
    tx<T>(fn: (connection: TTransaction) => Promise<T>): Promise<T>;
    query(query: SQLQuery): Promise<any[]>;
    query(query: SQLQuery[]): Promise<any[][]>;
    addPostCommitStep(fn: () => Promise<void>): Promise<void>;
    queryStream(query: SQLQuery, options?: QueryStreamOptions<TDriver>): AsyncGenerator<any, void, unknown>;
    dispose(): Promise<void>;
}
export {};
