import { ConnectionPool, PoolOptions } from '@databases/connection-pool';
import type { SQLQuery } from '@databases/sql';
import Factory, { Disposable } from './Factory';
import Driver from './Driver';
import QueryableType from './QueryableType';
declare type TransactionOptions<TDriver extends Driver<any, any>> = TDriver extends Driver<infer TTransactionOptions, any> ? TTransactionOptions : unknown;
declare type QueryStreamOptions<TDriver extends Driver<any, any>> = TDriver extends Driver<any, infer TQueryStreamOptions> ? TQueryStreamOptions : unknown;
export { PoolOptions };
export default class BaseConnectionPool<TConnection extends Disposable, TTransaction extends Disposable, TDriver extends Driver<any, any>> {
    readonly type = QueryableType.ConnectionPool;
    protected readonly _pool: ConnectionPool<TDriver>;
    private readonly _factories;
    private _disposed;
    constructor(options: PoolOptions<TDriver>, factories: Factory<TDriver, TConnection, TTransaction>);
    protected _withDriverFromPool<TArgs extends any[], TResult>(fn: (driver: TDriver, ...args: TArgs) => Promise<TResult>, ...args: TArgs): Promise<TResult>;
    protected _throwIfDisposed(): void;
    task<T>(fn: (connection: TConnection) => Promise<T>): Promise<T>;
    tx<TResult>(fn: (connection: TTransaction) => Promise<TResult>, options?: TransactionOptions<TDriver>): Promise<TResult>;
    query(query: SQLQuery): Promise<any[]>;
    query(query: SQLQuery[]): Promise<any[][]>;
    addPostCommitStep(fn: () => Promise<void>): Promise<void>;
    queryStream(query: SQLQuery, options?: QueryStreamOptions<TDriver>): AsyncGenerator<any, void, unknown>;
    dispose(): Promise<void>;
}
