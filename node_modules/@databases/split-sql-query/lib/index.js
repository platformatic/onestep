"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasSemicolonBeforeEnd = exports.hasValues = void 0;
const web_1 = require("@databases/sql/web");
function hasValuesFormatter(query) {
    return query.some((q) => q.type === web_1.SQLItemType.VALUE);
}
/**
 * Test whether the query has any parameters, or whether it is just a static
 * string. Returns `true` if there are parameters.
 */
function hasValues(query) {
    return query.format(hasValuesFormatter);
}
exports.hasValues = hasValues;
function hasSemicolonBeforeEndFormatter(query) {
    return query.some((q, i) => {
        if (q.type !== web_1.SQLItemType.RAW)
            return false;
        if (i === query.length - 1) {
            const text = q.text.trim();
            const index = text.indexOf(';');
            return index !== -1 && index < text.length - 1;
        }
        return q.text.includes(';');
    });
}
/**
 * A faster test for whether an SQLQuery is likely to contain multiple statements
 *
 * It is possible for a single query to return `true` if it has a `;` in a comment
 * or in a string literal/identifier name. If `hasSemicolonBeforeEnd` returns `false`
 * you can trust that the query is a single statement.
 */
function hasSemicolonBeforeEnd(query) {
    return query.format(hasSemicolonBeforeEndFormatter);
}
exports.hasSemicolonBeforeEnd = hasSemicolonBeforeEnd;
function splitSqlQueryParts(query) {
    let parts = [];
    const queries = [parts];
    let quoteChar;
    let lineCommentStart = false;
    let isLineComment = false;
    let blockCommentStart = false;
    let isBlockComment = false;
    let isBlockCommentPrinted = false;
    let isBlockCommentFirstChar = false;
    let isBlockCommentEnd = false;
    // https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-DOLLAR-QUOTING
    // The tag, if any, of a dollar-quoted string follows the same rules as an unquoted identifier,
    // except that it cannot contain a dollar sign. Tags are case sensitive, so $tag$String content$tag$
    // is correct, but $TAG$String content$tag$ is not.
    let dollarQuoteStart = ``;
    let dollarQuote = ``;
    for (const part of query) {
        if (part.type === web_1.SQLItemType.RAW) {
            let str = '';
            for (const char of part.text) {
                if (lineCommentStart) {
                    lineCommentStart = false;
                    if (char === '-') {
                        isLineComment = true;
                    }
                    else {
                        str += '-';
                    }
                }
                if (blockCommentStart) {
                    blockCommentStart = false;
                    if (char === '*') {
                        isBlockCommentFirstChar = true;
                        isBlockComment = true;
                    }
                    else {
                        str += '/';
                    }
                }
                if (dollarQuoteStart && !dollarQuote) {
                    if (char === `$`) {
                        dollarQuote = `${dollarQuoteStart}$`;
                        dollarQuoteStart = ``;
                        str += char;
                        continue;
                    }
                    else if (/[0-9_]/i.test(char) ||
                        // we allow letters with diacritical marks
                        char.toLowerCase() !== char.toUpperCase()) {
                        dollarQuoteStart += char;
                    }
                    else {
                        dollarQuoteStart = ``;
                    }
                }
                if (isBlockCommentFirstChar) {
                    isBlockCommentFirstChar = false;
                    if (char === '*') {
                        isBlockCommentEnd = true;
                    }
                    else if (!/\s/.test(char)) {
                        isBlockCommentPrinted = true;
                        str += '/*' + char;
                    }
                }
                else if (isBlockComment) {
                    if (isBlockCommentPrinted) {
                        str += char;
                    }
                    if (isBlockCommentEnd) {
                        isBlockCommentEnd = false;
                        if (char === '/') {
                            isBlockComment = false;
                            isBlockCommentPrinted = false;
                        }
                    }
                    else if (char === '*') {
                        isBlockCommentEnd = true;
                    }
                }
                else if (isLineComment) {
                    if (char === '\n') {
                        str += '\n';
                        isLineComment = false;
                    }
                }
                else if (char === quoteChar) {
                    quoteChar = undefined;
                    str += char;
                }
                else if (quoteChar) {
                    str += char;
                }
                else if (dollarQuote) {
                    if (dollarQuoteStart) {
                        dollarQuoteStart += char;
                        if (dollarQuoteStart === dollarQuote) {
                            dollarQuote = ``;
                            dollarQuoteStart = ``;
                        }
                    }
                    if (dollarQuote && char === `$`) {
                        dollarQuoteStart = `$`;
                    }
                    str += char;
                }
                else {
                    switch (char) {
                        case `'`:
                        case `"`:
                        case '`':
                            quoteChar = char;
                            str += char;
                            break;
                        case `$`:
                            dollarQuoteStart = `$`;
                            str += char;
                            break;
                        case `-`:
                            lineCommentStart = true;
                            break;
                        case `/`:
                            blockCommentStart = true;
                            break;
                        case `;`:
                            if (str.trim()) {
                                parts.push({ type: web_1.SQLItemType.RAW, text: str });
                                str = '';
                            }
                            if (parts.length) {
                                parts = [];
                                queries.push(parts);
                            }
                            break;
                        default:
                            str += char;
                            break;
                    }
                }
            }
            if (lineCommentStart) {
                str += '-';
            }
            if (blockCommentStart) {
                str += '/';
            }
            if (parts.length || str.trim()) {
                parts.push({ type: web_1.SQLItemType.RAW, text: str });
            }
        }
        else {
            parts.push(part);
        }
    }
    return queries
        .filter((parts) => parts.length)
        .map((parts) => web_1.default.__dangerous__constructFromParts(parts));
}
/**
 * Split an SQLQuery into an array of statements
 */
function splitSqlQuery(query) {
    if (!hasSemicolonBeforeEnd(query))
        return [query];
    const split = query.format(splitSqlQueryParts);
    if (split.length <= 1) {
        return [query];
    }
    else {
        return split;
    }
}
exports.default = splitSqlQuery;
//# sourceMappingURL=index.js.map