const React = require('react');

const {
  Box,
  Text
} = require('ink');

const importJSX = require('@isaacs/import-jsx');

const Color = importJSX('../../color.js');

const glyphColor = ({
  ok,
  skip,
  todo
}) => ({
  [skip ? 'cyan' : todo ? 'magenta' : !ok ? 'red' : 'green']: true
});

const glyphText = ({
  ok,
  skip,
  todo
}) => skip ? ' ~ ' : todo ? ' ☐ ' : !ok ? ' ✖ ' : ' ✓ ';

const Glyph = ({
  ok,
  skip,
  todo
}) => /*#__PURE__*/React.createElement(Box, {
  width: 3
}, /*#__PURE__*/React.createElement(Color, Object.assign({
  bold: true
}, glyphColor({
  ok,
  skip,
  todo
})), /*#__PURE__*/React.createElement(Text, null, glyphText({
  ok,
  skip,
  todo
}))));

const Reason = ({
  skip,
  todo
}) => skip && skip !== true ? /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, ' > '), /*#__PURE__*/React.createElement(Color, glyphColor({
  skip,
  todo
}), /*#__PURE__*/React.createElement(Text, null, skip))) : todo && todo !== true ? /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, ' > '), /*#__PURE__*/React.createElement(Color, glyphColor({
  skip,
  todo
}), /*#__PURE__*/React.createElement(Text, null, todo))) : /*#__PURE__*/React.createElement(Text, null);

const AssertName = ({
  ok,
  name,
  skip,
  todo
}) => /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Glyph, {
  ok,
  skip,
  todo
}), /*#__PURE__*/React.createElement(Text, null, name || '(unnamed test)'), /*#__PURE__*/React.createElement(Reason, {
  skip,
  todo
}));

module.exports = AssertName;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2VydC1uYW1lLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIkJveCIsIlRleHQiLCJpbXBvcnRKU1giLCJDb2xvciIsImdseXBoQ29sb3IiLCJvayIsInNraXAiLCJ0b2RvIiwiZ2x5cGhUZXh0IiwiR2x5cGgiLCJSZWFzb24iLCJBc3NlcnROYW1lIiwibmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDQyxFQUFBQSxHQUFEO0FBQU1DLEVBQUFBO0FBQU4sSUFBY0YsT0FBTyxDQUFDLEtBQUQsQ0FBM0I7O0FBQ0EsTUFBTUcsU0FBUyxHQUFHSCxPQUFPLENBQUMsb0JBQUQsQ0FBekI7O0FBQ0EsTUFBTUksS0FBSyxHQUFHRCxTQUFTLENBQUMsZ0JBQUQsQ0FBdkI7O0FBRUEsTUFBTUUsVUFBVSxHQUFHLENBQUM7QUFBRUMsRUFBQUEsRUFBRjtBQUFNQyxFQUFBQSxJQUFOO0FBQVlDLEVBQUFBO0FBQVosQ0FBRCxNQUF5QjtBQUMxQyxHQUFFRCxJQUFJLEdBQUcsTUFBSCxHQUNKQyxJQUFJLEdBQUcsU0FBSCxHQUNKLENBQUNGLEVBQUQsR0FBTSxLQUFOLEdBQ0EsT0FIRixHQUdZO0FBSjhCLENBQXpCLENBQW5COztBQU9BLE1BQU1HLFNBQVMsR0FBRyxDQUFDO0FBQUVILEVBQUFBLEVBQUY7QUFBTUMsRUFBQUEsSUFBTjtBQUFZQyxFQUFBQTtBQUFaLENBQUQsS0FDaEJELElBQUksR0FBRyxLQUFILEdBQ0ZDLElBQUksR0FBRyxLQUFILEdBQ0osQ0FBQ0YsRUFBRCxHQUFNLEtBQU4sR0FDQSxLQUpKOztBQU1BLE1BQU1JLEtBQUssR0FBRyxDQUFDO0FBQUVKLEVBQUFBLEVBQUY7QUFBTUMsRUFBQUEsSUFBTjtBQUFZQyxFQUFBQTtBQUFaLENBQUQsa0JBQ1osb0JBQUMsR0FBRDtBQUFLLEVBQUEsS0FBSyxFQUFFO0FBQVosZ0JBQ0Usb0JBQUMsS0FBRDtBQUFPLEVBQUEsSUFBSTtBQUFYLEdBQWdCSCxVQUFVLENBQUM7QUFBQ0MsRUFBQUEsRUFBRDtBQUFLQyxFQUFBQSxJQUFMO0FBQVdDLEVBQUFBO0FBQVgsQ0FBRCxDQUExQixnQkFDRSxvQkFBQyxJQUFELFFBQU9DLFNBQVMsQ0FBQztBQUFDSCxFQUFBQSxFQUFEO0FBQUtDLEVBQUFBLElBQUw7QUFBV0MsRUFBQUE7QUFBWCxDQUFELENBQWhCLENBREYsQ0FERixDQURGOztBQVFBLE1BQU1HLE1BQU0sR0FBRyxDQUFDO0FBQUNKLEVBQUFBLElBQUQ7QUFBT0MsRUFBQUE7QUFBUCxDQUFELEtBQ2JELElBQUksSUFBSUEsSUFBSSxLQUFLLElBQWpCLGdCQUNFLG9CQUFDLEdBQUQscUJBQ0Usb0JBQUMsSUFBRCxRQUFPLEtBQVAsQ0FERixlQUVFLG9CQUFDLEtBQUQsRUFBV0YsVUFBVSxDQUFDO0FBQUNFLEVBQUFBLElBQUQ7QUFBT0MsRUFBQUE7QUFBUCxDQUFELENBQXJCLGVBQXFDLG9CQUFDLElBQUQsUUFBT0QsSUFBUCxDQUFyQyxDQUZGLENBREYsR0FNRUMsSUFBSSxJQUFJQSxJQUFJLEtBQUssSUFBakIsZ0JBQ0Esb0JBQUMsR0FBRCxxQkFDRSxvQkFBQyxJQUFELFFBQU8sS0FBUCxDQURGLGVBRUUsb0JBQUMsS0FBRCxFQUFXSCxVQUFVLENBQUM7QUFBQ0UsRUFBQUEsSUFBRDtBQUFPQyxFQUFBQTtBQUFQLENBQUQsQ0FBckIsZUFBcUMsb0JBQUMsSUFBRCxRQUFPQSxJQUFQLENBQXJDLENBRkYsQ0FEQSxnQkFNQSxvQkFBQyxJQUFELE9BYko7O0FBZUEsTUFBTUksVUFBVSxHQUFHLENBQUM7QUFBRU4sRUFBQUEsRUFBRjtBQUFNTyxFQUFBQSxJQUFOO0FBQVlOLEVBQUFBLElBQVo7QUFBa0JDLEVBQUFBO0FBQWxCLENBQUQsa0JBQ2pCLG9CQUFDLEdBQUQscUJBQ0Usb0JBQUMsS0FBRDtBQUFZRixFQUFBQSxFQUFaO0FBQWdCQyxFQUFBQSxJQUFoQjtBQUFzQkMsRUFBQUE7QUFBdEIsRUFERixlQUVFLG9CQUFDLElBQUQsUUFBT0ssSUFBSSxJQUFJLGdCQUFmLENBRkYsZUFHRSxvQkFBQyxNQUFEO0FBQWFOLEVBQUFBLElBQWI7QUFBbUJDLEVBQUFBO0FBQW5CLEVBSEYsQ0FERjs7QUFRQU0sTUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxVQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKVxuY29uc3Qge0JveCwgVGV4dH0gPSByZXF1aXJlKCdpbmsnKVxuY29uc3QgaW1wb3J0SlNYID0gcmVxdWlyZSgnQGlzYWFjcy9pbXBvcnQtanN4JylcbmNvbnN0IENvbG9yID0gaW1wb3J0SlNYKCcuLi8uLi9jb2xvci5qcycpXG5cbmNvbnN0IGdseXBoQ29sb3IgPSAoeyBvaywgc2tpcCwgdG9kbyB9KSA9PiAoe1xuICBbIHNraXAgPyAnY3lhbidcbiAgOiB0b2RvID8gJ21hZ2VudGEnXG4gIDogIW9rID8gJ3JlZCdcbiAgOiAnZ3JlZW4nXTogdHJ1ZSxcbn0pXG5cbmNvbnN0IGdseXBoVGV4dCA9ICh7IG9rLCBza2lwLCB0b2RvIH0pID0+XG4gIHNraXAgPyAnIH4gJ1xuICA6IHRvZG8gPyAnIOKYkCAnXG4gIDogIW9rID8gJyDinJYgJ1xuICA6ICcg4pyTICdcblxuY29uc3QgR2x5cGggPSAoeyBvaywgc2tpcCwgdG9kbyB9KSA9PiAoXG4gIDxCb3ggd2lkdGg9ezN9PlxuICAgIDxDb2xvciBib2xkIHsuLi5nbHlwaENvbG9yKHtvaywgc2tpcCwgdG9kb30pfT5cbiAgICAgIDxUZXh0PntnbHlwaFRleHQoe29rLCBza2lwLCB0b2RvfSl9PC9UZXh0PlxuICAgIDwvQ29sb3I+XG4gIDwvQm94PlxuKVxuXG5jb25zdCBSZWFzb24gPSAoe3NraXAsIHRvZG99KSA9PlxuICBza2lwICYmIHNraXAgIT09IHRydWUgPyAoXG4gICAgPEJveD5cbiAgICAgIDxUZXh0PnsnID4gJ308L1RleHQ+XG4gICAgICA8Q29sb3Igey4uLmdseXBoQ29sb3Ioe3NraXAsIHRvZG99KX0+PFRleHQ+e3NraXB9PC9UZXh0PjwvQ29sb3I+XG4gICAgPC9Cb3g+XG4gIClcbiAgOiB0b2RvICYmIHRvZG8gIT09IHRydWUgPyAoXG4gICAgPEJveD5cbiAgICAgIDxUZXh0PnsnID4gJ308L1RleHQ+XG4gICAgICA8Q29sb3Igey4uLmdseXBoQ29sb3Ioe3NraXAsIHRvZG99KX0+PFRleHQ+e3RvZG99PC9UZXh0PjwvQ29sb3I+XG4gICAgPC9Cb3g+XG4gIClcbiAgOiA8VGV4dD48L1RleHQ+XG5cbmNvbnN0IEFzc2VydE5hbWUgPSAoeyBvaywgbmFtZSwgc2tpcCwgdG9kbyB9KSA9PiAoXG4gIDxCb3g+XG4gICAgPEdseXBoIHsuLi57b2ssIHNraXAsIHRvZG99fSAvPlxuICAgIDxUZXh0PntuYW1lIHx8ICcodW5uYW1lZCB0ZXN0KSd9PC9UZXh0PlxuICAgIDxSZWFzb24gey4uLntza2lwLCB0b2RvfX0gLz5cbiAgPC9Cb3g+XG4pXG5cbm1vZHVsZS5leHBvcnRzID0gQXNzZXJ0TmFtZVxuIl19