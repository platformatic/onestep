const React = require('react');

const ms = require('ms');

const importJSX = require('@isaacs/import-jsx');

const {
  useStdout,
  Box,
  Text
} = require('ink');

const Parser = require('tap-parser');

const chalk = require('chalk'); // Pull in all the tags here so we can re-export them


const AssertCounts = importJSX('./assert-counts.js');
const AssertName = importJSX('./assert-name.js');
const Counts = importJSX('./counts.js');
const Footer = importJSX('./footer.js');
const Log = importJSX('./log.js');
const PassFail = importJSX('./pass-fail.js');
const Result = importJSX('./result.js');
const Runs = importJSX('./runs.js');
const StatusMark = importJSX('./status-mark.js');
const SuiteCounts = importJSX('./suite-counts.js');
const Summary = importJSX('./summary.js');
const TestPoint = importJSX('./test-point.js');
const Test = importJSX('./test.js');

class Base extends React.Component {
  get Summary() {
    return Summary;
  }

  get Runs() {
    return Runs;
  }

  get Log() {
    return Log;
  }

  get Footer() {
    return Footer;
  }

  constructor({
    tap
  }) {
    super();
    this.mounted = false;
    this.state = {
      // the stuff in the static section.  most importantly, errors in
      // real time, but also console output, test summaries, etc.
      log: [],
      // all tests, done and queued
      tests: [],
      // currently running
      runs: [],
      // tap.results at the end
      results: null,
      // counts of all relevant test points
      // debounced on this.assertCounts
      assertCounts: {
        total: 0,
        pass: 0,
        fail: 0,
        skip: 0,
        todo: 0
      },
      // a count of all the test suites run
      suiteCounts: {
        total: 0,
        pass: 0,
        fail: 0,
        skip: 0,
        todo: 0
      },
      // total elapsed time
      time: 0,
      bailout: null
    };
    this.start = Date.now();
    this.timer = setInterval(() => this.setState(prevState => ({ ...prevState,
      time: this.time,
      assertCounts: this.assertCounts
    })), 200); // keep counters on the object itself, to debounce

    this.assertCounts = {
      total: 0,
      pass: 0,
      fail: 0,
      skip: 0,
      todo: 0
    }, this.counterBouncer = null;
    tap.on('subtestAdd', t => this.addTest(t));
    tap.on('subtestStart', t => this.startTest(t));
    tap.on('subtestEnd', t => this.endTest(t));
    tap.on('end', () => this.endAll(tap));
    tap.once('bailout', message => this.bailout(message)); // Handle data that might come out of the tap object itself.

    tap.on('extra', this.onRaw(tap, 1));
    tap.parser.on('result', res => {
      if (res.fullname === 'TAP') {
        this.logRes(tap, res);
        this.inc(res.todo ? 'todo' : res.skip ? 'skip' : res.ok ? 'pass' : 'fail');
      }
    }); // consume the text stream, but ignore it.
    // we get all we need from the child test objects.

    this.tapResume(tap);
  }

  tapResume(tap) {
    tap.resume();
  }

  get time() {
    return Date.now() - this.start;
  }

  componentDidMount() {
    this.mounted = true;
  }

  componentWillUnmount() {
    this.mounted = false;
    clearTimeout(this.counterBouncer);
    clearInterval(this.timer);
  }

  bailout(bailout, test = null) {
    this.bailedOut = bailout;
    return this.setState(prevState => prevState.bailout ? prevState : { ...prevState,
      runs: test ? prevState.runs.filter(t => t.childId !== test.childId) : [],
      // if we bail out, then we should only show the bailout,
      // or the counts get confusing, because we never receive a testEnd
      // for the other ones.
      tests: prevState.tests.filter(t => test ? t.childId === test.childId : t.results && t.results.bailout === bailout),
      bailout,
      assertCounts: this.assertCounts,
      time: this.time
    });
  }

  inc(type) {
    this.assertCounts.total++;
    this.assertCounts[type]++;
    if (this.counterBouncer) return;
    this.counterBouncer = setTimeout(() => {
      this.counterBouncer = null;
      this.setState(prevState => ({ ...prevState,
        assertCounts: this.assertCounts
      }));
    }, 50);
  }

  addTest(test) {
    this.setState(prevState => ({ ...prevState,
      tests: prevState.tests.concat(test),
      suiteCounts: { ...prevState.suiteCounts,
        total: prevState.suiteCounts.total + 1
      },
      assertCounts: this.assertCounts,
      time: this.time
    }));
    test.on('preprocess', options => options.stdio = 'pipe').on('process', proc => {
      proc.stderr.setEncoding('utf8');
      proc.stderr.on('data', this.onRaw(test, 2));
    }).parser.on('extra', this.onRaw(test, 1)).on('pass', res => this.inc('pass')).on('todo', res => (this.inc('todo'), this.logRes(test, res))).on('skip', res => (this.inc('skip'), this.logRes(test, res))).on('fail', res => (this.inc('fail'), this.logRes(test, res)));
  }

  onRaw(test, fd) {
    const p = ` ${fd}>`;
    return raw => {
      const pref = chalk.bold.dim(test.name + p + ' ');
      raw = raw.replace(/\n$/, '').replace(/^/gm, pref);
      this.setState(prevState => ({ ...prevState,
        log: prevState.log.concat({
          raw
        }),
        assertCounts: this.assertCounts
      }));
    };
  }

  logRes(test, res) {
    res.testName = test.name;
    this.setState(prevState => ({ ...prevState,
      log: prevState.log.concat({
        res
      }),
      assertCounts: this.assertCounts,
      time: this.time
    }));
  }

  startTest(test) {
    test.startTime = Date.now();
    test.once('bailout', message => this.bailout(message, test));
    this.setState(prevState => prevState.bailout ? prevState : { ...prevState,
      runs: prevState.runs.concat(test),
      assertCounts: this.assertCounts
    });
  }

  endTest(test) {
    test.endTime = Date.now(); // put it in the appropriate bucket.
    // live update assertion handed by tap.parser event

    const ok = test.results && test.results.ok;
    const skip = test.options.skip && ok !== false;
    const todo = test.options.todo && ok !== false;
    const bucket = skip ? 'skip' : todo ? 'todo' : !ok ? 'fail' : 'pass';
    this.setState(prevState => prevState.bailout ? prevState : { ...prevState,
      log: prevState.log.concat({
        test
      }),
      runs: prevState.runs.filter(t => t.childId !== test.childId),
      suiteCounts: { ...prevState.suiteCounts,
        [bucket]: prevState.suiteCounts[bucket] + 1
      },
      time: this.time,
      assertCounts: this.assertCounts
    });
  }

  endAll(tap) {
    clearInterval(this.timer);
    clearInterval(this.counterBouncer);
    this.setState(prevState => ({ ...prevState,
      results: tap.results,
      assertCounts: this.assertCounts,
      time: tap.time || this.time
    }));
  }

  render() {
    const {
      Log,
      Runs,
      Summary,
      Footer
    } = this;
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: "column"
    }, /*#__PURE__*/React.createElement(Log, {
      log: this.state.log
    }), /*#__PURE__*/React.createElement(Runs, {
      runs: this.state.runs
    }), this.state.results ? /*#__PURE__*/React.createElement(Summary, {
      tests: this.state.tests,
      results: this.state.results
    }) : /*#__PURE__*/React.createElement(Text, null), /*#__PURE__*/React.createElement(Footer, {
      suiteCounts: this.state.suiteCounts,
      assertCounts: this.state.assertCounts,
      time: this.state.time
    }));
  }

}

Base.AssertCounts = AssertCounts;
Base.AssertName = AssertName;
Base.Counts = Counts;
Base.Footer = Footer;
Base.Log = Log;
Base.PassFail = PassFail;
Base.Result = Result;
Base.Runs = Runs;
Base.StatusMark = StatusMark;
Base.SuiteCounts = SuiteCounts;
Base.Summary = Summary;
Base.TestPoint = TestPoint;
Base.Test = Test;
module.exports = Base;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIm1zIiwiaW1wb3J0SlNYIiwidXNlU3Rkb3V0IiwiQm94IiwiVGV4dCIsIlBhcnNlciIsImNoYWxrIiwiQXNzZXJ0Q291bnRzIiwiQXNzZXJ0TmFtZSIsIkNvdW50cyIsIkZvb3RlciIsIkxvZyIsIlBhc3NGYWlsIiwiUmVzdWx0IiwiUnVucyIsIlN0YXR1c01hcmsiLCJTdWl0ZUNvdW50cyIsIlN1bW1hcnkiLCJUZXN0UG9pbnQiLCJUZXN0IiwiQmFzZSIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwidGFwIiwibW91bnRlZCIsInN0YXRlIiwibG9nIiwidGVzdHMiLCJydW5zIiwicmVzdWx0cyIsImFzc2VydENvdW50cyIsInRvdGFsIiwicGFzcyIsImZhaWwiLCJza2lwIiwidG9kbyIsInN1aXRlQ291bnRzIiwidGltZSIsImJhaWxvdXQiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJ0aW1lciIsInNldEludGVydmFsIiwic2V0U3RhdGUiLCJwcmV2U3RhdGUiLCJjb3VudGVyQm91bmNlciIsIm9uIiwidCIsImFkZFRlc3QiLCJzdGFydFRlc3QiLCJlbmRUZXN0IiwiZW5kQWxsIiwib25jZSIsIm1lc3NhZ2UiLCJvblJhdyIsInBhcnNlciIsInJlcyIsImZ1bGxuYW1lIiwibG9nUmVzIiwiaW5jIiwib2siLCJ0YXBSZXN1bWUiLCJyZXN1bWUiLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJJbnRlcnZhbCIsInRlc3QiLCJiYWlsZWRPdXQiLCJmaWx0ZXIiLCJjaGlsZElkIiwidHlwZSIsInNldFRpbWVvdXQiLCJjb25jYXQiLCJvcHRpb25zIiwic3RkaW8iLCJwcm9jIiwic3RkZXJyIiwic2V0RW5jb2RpbmciLCJmZCIsInAiLCJyYXciLCJwcmVmIiwiYm9sZCIsImRpbSIsIm5hbWUiLCJyZXBsYWNlIiwidGVzdE5h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QUFrQkEsVUFBbEI7QUFDQUssSUFBSSxDQUFDSixXQUFMLEdBQW1CQSxXQUFuQjtBQUNBSSxJQUFJLENBQUNILE9BQUwsR0FBZUEsT0FBZjtBQUNBRyxJQUFJLENBQUNGLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0FFLElBQUksQ0FBQ0QsSUFBTCxHQUFZQSxJQUFaO0FBRUEwRSxNQUFNLENBQUNDLE9BQVAsR0FBaUIxRSxJQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKVxuY29uc3QgbXMgPSByZXF1aXJlKCdtcycpXG5jb25zdCBpbXBvcnRKU1ggPSByZXF1aXJlKCdAaXNhYWNzL2ltcG9ydC1qc3gnKVxuY29uc3Qge3VzZVN0ZG91dCwgQm94LCBUZXh0fSA9IHJlcXVpcmUoJ2luaycpXG5jb25zdCBQYXJzZXIgPSByZXF1aXJlKCd0YXAtcGFyc2VyJylcbmNvbnN0IGNoYWxrID0gcmVxdWlyZSgnY2hhbGsnKVxuXG4vLyBQdWxsIGluIGFsbCB0aGUgdGFncyBoZXJlIHNvIHdlIGNhbiByZS1leHBvcnQgdGhlbVxuY29uc3QgQXNzZXJ0Q291bnRzID0gaW1wb3J0SlNYKCcuL2Fzc2VydC1jb3VudHMuanMnKVxuY29uc3QgQXNzZXJ0TmFtZSA9IGltcG9ydEpTWCgnLi9hc3NlcnQtbmFtZS5qcycpXG5jb25zdCBDb3VudHMgPSBpbXBvcnRKU1goJy4vY291bnRzLmpzJylcbmNvbnN0IEZvb3RlciA9IGltcG9ydEpTWCgnLi9mb290ZXIuanMnKVxuY29uc3QgTG9nID0gaW1wb3J0SlNYKCcuL2xvZy5qcycpXG5jb25zdCBQYXNzRmFpbCA9IGltcG9ydEpTWCgnLi9wYXNzLWZhaWwuanMnKVxuY29uc3QgUmVzdWx0ID0gaW1wb3J0SlNYKCcuL3Jlc3VsdC5qcycpXG5jb25zdCBSdW5zID0gaW1wb3J0SlNYKCcuL3J1bnMuanMnKVxuY29uc3QgU3RhdHVzTWFyayA9IGltcG9ydEpTWCgnLi9zdGF0dXMtbWFyay5qcycpXG5jb25zdCBTdWl0ZUNvdW50cyA9IGltcG9ydEpTWCgnLi9zdWl0ZS1jb3VudHMuanMnKVxuY29uc3QgU3VtbWFyeSA9IGltcG9ydEpTWCgnLi9zdW1tYXJ5LmpzJylcbmNvbnN0IFRlc3RQb2ludCA9IGltcG9ydEpTWCgnLi90ZXN0LXBvaW50LmpzJylcbmNvbnN0IFRlc3QgPSBpbXBvcnRKU1goJy4vdGVzdC5qcycpXG5cbmNsYXNzIEJhc2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBnZXQgU3VtbWFyeSAoKSB7XG4gICAgcmV0dXJuIFN1bW1hcnlcbiAgfVxuICBnZXQgUnVucyAoKSB7XG4gICAgcmV0dXJuIFJ1bnNcbiAgfVxuICBnZXQgTG9nICgpIHtcbiAgICByZXR1cm4gTG9nXG4gIH1cbiAgZ2V0IEZvb3RlciAoKSB7XG4gICAgcmV0dXJuIEZvb3RlclxuICB9XG5cbiAgY29uc3RydWN0b3IgKHsgdGFwIH0pIHtcbiAgICBzdXBlcigpXG5cbiAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAvLyB0aGUgc3R1ZmYgaW4gdGhlIHN0YXRpYyBzZWN0aW9uLiAgbW9zdCBpbXBvcnRhbnRseSwgZXJyb3JzIGluXG4gICAgICAvLyByZWFsIHRpbWUsIGJ1dCBhbHNvIGNvbnNvbGUgb3V0cHV0LCB0ZXN0IHN1bW1hcmllcywgZXRjLlxuICAgICAgbG9nOiBbXSxcblxuICAgICAgLy8gYWxsIHRlc3RzLCBkb25lIGFuZCBxdWV1ZWRcbiAgICAgIHRlc3RzOiBbXSxcblxuICAgICAgLy8gY3VycmVudGx5IHJ1bm5pbmdcbiAgICAgIHJ1bnM6IFtdLFxuXG4gICAgICAvLyB0YXAucmVzdWx0cyBhdCB0aGUgZW5kXG4gICAgICByZXN1bHRzOiBudWxsLFxuXG4gICAgICAvLyBjb3VudHMgb2YgYWxsIHJlbGV2YW50IHRlc3QgcG9pbnRzXG4gICAgICAvLyBkZWJvdW5jZWQgb24gdGhpcy5hc3NlcnRDb3VudHNcbiAgICAgIGFzc2VydENvdW50czoge1xuICAgICAgICB0b3RhbDogMCxcbiAgICAgICAgcGFzczogMCxcbiAgICAgICAgZmFpbDogMCxcbiAgICAgICAgc2tpcDogMCxcbiAgICAgICAgdG9kbzogMCxcbiAgICAgIH0sXG5cbiAgICAgIC8vIGEgY291bnQgb2YgYWxsIHRoZSB0ZXN0IHN1aXRlcyBydW5cbiAgICAgIHN1aXRlQ291bnRzOiB7XG4gICAgICAgIHRvdGFsOiAwLFxuICAgICAgICBwYXNzOiAwLFxuICAgICAgICBmYWlsOiAwLFxuICAgICAgICBza2lwOiAwLFxuICAgICAgICB0b2RvOiAwLFxuICAgICAgfSxcblxuICAgICAgLy8gdG90YWwgZWxhcHNlZCB0aW1lXG4gICAgICB0aW1lOiAwLFxuXG4gICAgICBiYWlsb3V0OiBudWxsLFxuICAgIH1cblxuICAgIHRoaXMuc3RhcnQgPSBEYXRlLm5vdygpXG4gICAgdGhpcy50aW1lciA9IHNldEludGVydmFsKCgpID0+IHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+ICh7XG4gICAgICAuLi5wcmV2U3RhdGUsXG4gICAgICB0aW1lOiB0aGlzLnRpbWUsXG4gICAgICBhc3NlcnRDb3VudHM6IHRoaXMuYXNzZXJ0Q291bnRzLFxuICAgIH0pKSwgMjAwKVxuXG4gICAgLy8ga2VlcCBjb3VudGVycyBvbiB0aGUgb2JqZWN0IGl0c2VsZiwgdG8gZGVib3VuY2VcbiAgICB0aGlzLmFzc2VydENvdW50cyA9IHtcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgcGFzczogMCxcbiAgICAgIGZhaWw6IDAsXG4gICAgICBza2lwOiAwLFxuICAgICAgdG9kbzogMCxcbiAgICB9LFxuICAgIHRoaXMuY291bnRlckJvdW5jZXIgPSBudWxsXG5cbiAgICB0YXAub24oJ3N1YnRlc3RBZGQnLCB0ID0+IHRoaXMuYWRkVGVzdCh0KSlcbiAgICB0YXAub24oJ3N1YnRlc3RTdGFydCcsIHQgPT4gdGhpcy5zdGFydFRlc3QodCkpXG4gICAgdGFwLm9uKCdzdWJ0ZXN0RW5kJywgdCA9PiB0aGlzLmVuZFRlc3QodCkpXG4gICAgdGFwLm9uKCdlbmQnLCAoKSA9PiB0aGlzLmVuZEFsbCh0YXApKVxuICAgIHRhcC5vbmNlKCdiYWlsb3V0JywgbWVzc2FnZSA9PiB0aGlzLmJhaWxvdXQobWVzc2FnZSkpXG5cbiAgICAvLyBIYW5kbGUgZGF0YSB0aGF0IG1pZ2h0IGNvbWUgb3V0IG9mIHRoZSB0YXAgb2JqZWN0IGl0c2VsZi5cbiAgICB0YXAub24oJ2V4dHJhJywgdGhpcy5vblJhdyh0YXAsIDEpKVxuICAgIHRhcC5wYXJzZXIub24oJ3Jlc3VsdCcsIHJlcyA9PiB7XG4gICAgICBpZiAocmVzLmZ1bGxuYW1lID09PSAnVEFQJykge1xuICAgICAgICB0aGlzLmxvZ1Jlcyh0YXAsIHJlcylcbiAgICAgICAgdGhpcy5pbmMocmVzLnRvZG8gPyAndG9kbydcbiAgICAgICAgICA6IHJlcy5za2lwID8gJ3NraXAnXG4gICAgICAgICAgOiByZXMub2sgPyAncGFzcydcbiAgICAgICAgICA6ICdmYWlsJ1xuICAgICAgICApXG4gICAgICB9XG4gICAgfSlcblxuICAgIC8vIGNvbnN1bWUgdGhlIHRleHQgc3RyZWFtLCBidXQgaWdub3JlIGl0LlxuICAgIC8vIHdlIGdldCBhbGwgd2UgbmVlZCBmcm9tIHRoZSBjaGlsZCB0ZXN0IG9iamVjdHMuXG4gICAgdGhpcy50YXBSZXN1bWUodGFwKVxuICB9XG5cbiAgdGFwUmVzdW1lICh0YXApIHtcbiAgICB0YXAucmVzdW1lKClcbiAgfVxuXG4gIGdldCB0aW1lICgpIHtcbiAgICByZXR1cm4gRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnRcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSB0cnVlXG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gZmFsc2VcbiAgICBjbGVhclRpbWVvdXQodGhpcy5jb3VudGVyQm91bmNlcilcbiAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpXG4gIH1cblxuICBiYWlsb3V0IChiYWlsb3V0LCB0ZXN0ID0gbnVsbCkge1xuICAgIHRoaXMuYmFpbGVkT3V0ID0gYmFpbG91dFxuICAgIHJldHVybiB0aGlzLnNldFN0YXRlKHByZXZTdGF0ZSA9PiBwcmV2U3RhdGUuYmFpbG91dCA/IHByZXZTdGF0ZSA6ICh7XG4gICAgICAuLi5wcmV2U3RhdGUsXG4gICAgICBydW5zOiB0ZXN0ID8gcHJldlN0YXRlLnJ1bnMuZmlsdGVyKHQgPT4gdC5jaGlsZElkICE9PSB0ZXN0LmNoaWxkSWQpIDogW10sXG4gICAgICAvLyBpZiB3ZSBiYWlsIG91dCwgdGhlbiB3ZSBzaG91bGQgb25seSBzaG93IHRoZSBiYWlsb3V0LFxuICAgICAgLy8gb3IgdGhlIGNvdW50cyBnZXQgY29uZnVzaW5nLCBiZWNhdXNlIHdlIG5ldmVyIHJlY2VpdmUgYSB0ZXN0RW5kXG4gICAgICAvLyBmb3IgdGhlIG90aGVyIG9uZXMuXG4gICAgICB0ZXN0czogcHJldlN0YXRlLnRlc3RzLmZpbHRlcih0ID0+XG4gICAgICAgIHRlc3QgPyB0LmNoaWxkSWQgPT09IHRlc3QuY2hpbGRJZCA6XG4gICAgICAgIHQucmVzdWx0cyAmJiB0LnJlc3VsdHMuYmFpbG91dCA9PT0gYmFpbG91dCksXG4gICAgICBiYWlsb3V0LFxuICAgICAgYXNzZXJ0Q291bnRzOiB0aGlzLmFzc2VydENvdW50cyxcbiAgICAgIHRpbWU6IHRoaXMudGltZSxcbiAgICB9KSlcbiAgfVxuXG4gIGluYyAodHlwZSkge1xuICAgIHRoaXMuYXNzZXJ0Q291bnRzLnRvdGFsKytcbiAgICB0aGlzLmFzc2VydENvdW50c1t0eXBlXSsrXG4gICAgaWYgKHRoaXMuY291bnRlckJvdW5jZXIpXG4gICAgICByZXR1cm5cbiAgICB0aGlzLmNvdW50ZXJCb3VuY2VyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmNvdW50ZXJCb3VuY2VyID0gbnVsbFxuICAgICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHtcbiAgICAgICAgLi4ucHJldlN0YXRlLFxuICAgICAgICBhc3NlcnRDb3VudHM6IHRoaXMuYXNzZXJ0Q291bnRzXG4gICAgICB9KSlcbiAgICB9LCA1MClcbiAgfVxuXG4gIGFkZFRlc3QgKHRlc3QpIHtcbiAgICB0aGlzLnNldFN0YXRlKHByZXZTdGF0ZSA9PiAoe1xuICAgICAgLi4ucHJldlN0YXRlLFxuICAgICAgdGVzdHM6IHByZXZTdGF0ZS50ZXN0cy5jb25jYXQodGVzdCksXG4gICAgICBzdWl0ZUNvdW50czoge1xuICAgICAgICAuLi5wcmV2U3RhdGUuc3VpdGVDb3VudHMsXG4gICAgICAgIHRvdGFsOiBwcmV2U3RhdGUuc3VpdGVDb3VudHMudG90YWwgKyAxLFxuICAgICAgfSxcbiAgICAgIGFzc2VydENvdW50czogdGhpcy5hc3NlcnRDb3VudHMsXG4gICAgICB0aW1lOiB0aGlzLnRpbWUsXG4gICAgfSkpXG5cbiAgICB0ZXN0XG4gICAgICAub24oJ3ByZXByb2Nlc3MnLCBvcHRpb25zID0+IG9wdGlvbnMuc3RkaW8gPSAncGlwZScpXG4gICAgICAub24oJ3Byb2Nlc3MnLCBwcm9jID0+IHtcbiAgICAgICAgcHJvYy5zdGRlcnIuc2V0RW5jb2RpbmcoJ3V0ZjgnKVxuICAgICAgICBwcm9jLnN0ZGVyci5vbignZGF0YScsIHRoaXMub25SYXcodGVzdCwgMikpXG4gICAgICB9KVxuICAgICAgLnBhcnNlclxuICAgICAgICAub24oJ2V4dHJhJywgdGhpcy5vblJhdyh0ZXN0LCAxKSlcbiAgICAgICAgLm9uKCdwYXNzJywgcmVzID0+IHRoaXMuaW5jKCdwYXNzJykpXG4gICAgICAgIC5vbigndG9kbycsIHJlcyA9PiAodGhpcy5pbmMoJ3RvZG8nKSwgdGhpcy5sb2dSZXModGVzdCwgcmVzKSkpXG4gICAgICAgIC5vbignc2tpcCcsIHJlcyA9PiAodGhpcy5pbmMoJ3NraXAnKSwgdGhpcy5sb2dSZXModGVzdCwgcmVzKSkpXG4gICAgICAgIC5vbignZmFpbCcsIHJlcyA9PiAodGhpcy5pbmMoJ2ZhaWwnKSwgdGhpcy5sb2dSZXModGVzdCwgcmVzKSkpXG4gIH1cblxuICBvblJhdyAodGVzdCwgZmQpIHtcbiAgICBjb25zdCBwID0gYCAke2ZkfT5gXG4gICAgcmV0dXJuIHJhdyA9PiB7XG4gICAgICBjb25zdCBwcmVmID0gY2hhbGsuYm9sZC5kaW0odGVzdC5uYW1lICsgcCArICcgJylcbiAgICAgIHJhdyA9IHJhdy5yZXBsYWNlKC9cXG4kLywgJycpLnJlcGxhY2UoL14vZ20sIHByZWYpXG4gICAgICB0aGlzLnNldFN0YXRlKHByZXZTdGF0ZSA9PiAoe1xuICAgICAgICAuLi5wcmV2U3RhdGUsXG4gICAgICAgIGxvZzogcHJldlN0YXRlLmxvZy5jb25jYXQoe3Jhd30pLFxuICAgICAgICBhc3NlcnRDb3VudHM6IHRoaXMuYXNzZXJ0Q291bnRzLFxuICAgICAgfSkpXG4gICAgfVxuICB9XG5cbiAgbG9nUmVzICh0ZXN0LCByZXMpIHtcbiAgICByZXMudGVzdE5hbWUgPSB0ZXN0Lm5hbWVcbiAgICB0aGlzLnNldFN0YXRlKHByZXZTdGF0ZSA9PiAoe1xuICAgICAgLi4ucHJldlN0YXRlLFxuICAgICAgbG9nOiBwcmV2U3RhdGUubG9nLmNvbmNhdCh7cmVzfSksXG4gICAgICBhc3NlcnRDb3VudHM6IHRoaXMuYXNzZXJ0Q291bnRzLFxuICAgICAgdGltZTogdGhpcy50aW1lLFxuICAgIH0pKVxuICB9XG5cbiAgc3RhcnRUZXN0ICh0ZXN0KSB7XG4gICAgdGVzdC5zdGFydFRpbWUgPSBEYXRlLm5vdygpXG4gICAgdGVzdC5vbmNlKCdiYWlsb3V0JywgbWVzc2FnZSA9PiB0aGlzLmJhaWxvdXQobWVzc2FnZSwgdGVzdCkpXG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gcHJldlN0YXRlLmJhaWxvdXQgPyBwcmV2U3RhdGUgOiAoe1xuICAgICAgLi4ucHJldlN0YXRlLFxuICAgICAgcnVuczogcHJldlN0YXRlLnJ1bnMuY29uY2F0KHRlc3QpLFxuICAgICAgYXNzZXJ0Q291bnRzOiB0aGlzLmFzc2VydENvdW50cyxcbiAgICB9KSlcbiAgfVxuXG4gIGVuZFRlc3QgKHRlc3QpIHtcbiAgICB0ZXN0LmVuZFRpbWUgPSBEYXRlLm5vdygpXG5cbiAgICAvLyBwdXQgaXQgaW4gdGhlIGFwcHJvcHJpYXRlIGJ1Y2tldC5cbiAgICAvLyBsaXZlIHVwZGF0ZSBhc3NlcnRpb24gaGFuZGVkIGJ5IHRhcC5wYXJzZXIgZXZlbnRcbiAgICBjb25zdCBvayA9IHRlc3QucmVzdWx0cyAmJiB0ZXN0LnJlc3VsdHMub2tcbiAgICBjb25zdCBza2lwID0gdGVzdC5vcHRpb25zLnNraXAgJiYgb2sgIT09IGZhbHNlXG4gICAgY29uc3QgdG9kbyA9IHRlc3Qub3B0aW9ucy50b2RvICYmIG9rICE9PSBmYWxzZVxuICAgIGNvbnN0IGJ1Y2tldCA9XG4gICAgICBza2lwID8gJ3NraXAnXG4gICAgICA6IHRvZG8gPyAndG9kbydcbiAgICAgIDogIW9rID8gJ2ZhaWwnXG4gICAgICA6ICdwYXNzJ1xuXG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gcHJldlN0YXRlLmJhaWxvdXQgPyBwcmV2U3RhdGUgOiAoe1xuICAgICAgLi4ucHJldlN0YXRlLFxuICAgICAgbG9nOiBwcmV2U3RhdGUubG9nLmNvbmNhdCh7dGVzdH0pLFxuICAgICAgcnVuczogcHJldlN0YXRlLnJ1bnMuZmlsdGVyKHQgPT4gdC5jaGlsZElkICE9PSB0ZXN0LmNoaWxkSWQpLFxuICAgICAgc3VpdGVDb3VudHM6IHtcbiAgICAgICAgLi4ucHJldlN0YXRlLnN1aXRlQ291bnRzLFxuICAgICAgICBbYnVja2V0XTogcHJldlN0YXRlLnN1aXRlQ291bnRzW2J1Y2tldF0gKyAxLFxuICAgICAgfSxcbiAgICAgIHRpbWU6IHRoaXMudGltZSxcbiAgICAgIGFzc2VydENvdW50czogdGhpcy5hc3NlcnRDb3VudHMsXG4gICAgfSkpXG4gIH1cblxuICBlbmRBbGwgKHRhcCkge1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcilcbiAgICBjbGVhckludGVydmFsKHRoaXMuY291bnRlckJvdW5jZXIpXG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHtcbiAgICAgIC4uLnByZXZTdGF0ZSxcbiAgICAgIHJlc3VsdHM6IHRhcC5yZXN1bHRzLFxuICAgICAgYXNzZXJ0Q291bnRzOiB0aGlzLmFzc2VydENvdW50cyxcbiAgICAgIHRpbWU6IHRhcC50aW1lIHx8IHRoaXMudGltZSxcbiAgICB9KSlcbiAgfVxuXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3Qge0xvZywgUnVucywgU3VtbWFyeSwgRm9vdGVyfSA9IHRoaXNcbiAgICByZXR1cm4gKDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxuICAgICAgPExvZyBsb2c9e3RoaXMuc3RhdGUubG9nfSAvPlxuICAgICAgPFJ1bnMgcnVucz17dGhpcy5zdGF0ZS5ydW5zfSAvPntcbiAgICAgIHRoaXMuc3RhdGUucmVzdWx0cyA/IChcbiAgICAgICAgPFN1bW1hcnlcbiAgICAgICAgICB0ZXN0cz17dGhpcy5zdGF0ZS50ZXN0c31cbiAgICAgICAgICByZXN1bHRzPXt0aGlzLnN0YXRlLnJlc3VsdHN9IC8+XG4gICAgICAgICkgOiA8VGV4dD48L1RleHQ+XG4gICAgICB9PEZvb3RlclxuICAgICAgICBzdWl0ZUNvdW50cz17dGhpcy5zdGF0ZS5zdWl0ZUNvdW50c31cbiAgICAgICAgYXNzZXJ0Q291bnRzPXt0aGlzLnN0YXRlLmFzc2VydENvdW50c31cbiAgICAgICAgdGltZT17dGhpcy5zdGF0ZS50aW1lfSAvPlxuICAgIDwvQm94PilcbiAgfVxufVxuXG5CYXNlLkFzc2VydENvdW50cyA9IEFzc2VydENvdW50c1xuQmFzZS5Bc3NlcnROYW1lID0gQXNzZXJ0TmFtZVxuQmFzZS5Db3VudHMgPSBDb3VudHNcbkJhc2UuRm9vdGVyID0gRm9vdGVyXG5CYXNlLkxvZyA9IExvZ1xuQmFzZS5QYXNzRmFpbCA9IFBhc3NGYWlsXG5CYXNlLlJlc3VsdCA9IFJlc3VsdFxuQmFzZS5SdW5zID0gUnVuc1xuQmFzZS5TdGF0dXNNYXJrID0gU3RhdHVzTWFya1xuQmFzZS5TdWl0ZUNvdW50cyA9IFN1aXRlQ291bnRzXG5CYXNlLlN1bW1hcnkgPSBTdW1tYXJ5XG5CYXNlLlRlc3RQb2ludCA9IFRlc3RQb2ludFxuQmFzZS5UZXN0ID0gVGVzdFxuXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VcbiJdfQ==