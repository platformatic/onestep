"use strict";
/**
 * Prometheus metrics exporter for Fastify. Based on
 * {@link https://github.com/siimon/prom-client | prom-client}. Also by default
 * it adds fastify route response time metrics (histogram and summary).
 *
 * @packageDocumentation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fastify_plugin_1 = __importDefault(require("fastify-plugin"));
const prom_client_1 = __importDefault(require("prom-client"));
const fastify_metrics_1 = require("./fastify-metrics");
__exportStar(require("./types"), exports);
/**
 * Metric plugin
 *
 * @example
 *
 * ```typescript
 *     import fastify from 'fastify'
 *     import fastifyMetrics, { IMetricsPluginOptions } from fastify-metrics
 *
 *     const options: IMetricsPluginOptions = { endpoint: '/metrics' }
 *     fastify()
 *      .register(fastifyMetrics, options)
 *      .get('/foo', (request, reply) => {
 *         reply.code(200);
 *         const delay = Math.random() * 10000;
 *         setTimeout(() => {
 *           reply.send({ id, delay });
 *         }, delay);
 *      })
 *      .ready()
 *      .listen(3000)
 * ```
 */
exports.default = (0, fastify_plugin_1.default)(async (fastify, options) => {
    const { name = 'metrics', clearRegisterOnInit = false } = options;
    if (clearRegisterOnInit) {
        prom_client_1.default.register.clear();
    }
    const fm = new fastify_metrics_1.FastifyMetrics({ client: prom_client_1.default, fastify, options });
    fastify.decorate(name, fm);
}, {
    fastify: '>=4.0.0',
    name: 'fastify-metrics',
});
//# sourceMappingURL=index.js.map